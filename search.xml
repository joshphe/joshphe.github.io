<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TiDB 实现 Mysql 分库分表合并数据同步</title>
      <link href="/2022/12/05/tidb-shi-xian-mysql-fen-ku-fen-biao-he-bing-shu-ju-tong-bu/"/>
      <url>/2022/12/05/tidb-shi-xian-mysql-fen-ku-fen-biao-he-bing-shu-ju-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="TiDB实现Mysql分库分表合并数据同步"><a href="#TiDB实现Mysql分库分表合并数据同步" class="headerlink" title="TiDB实现Mysql分库分表合并数据同步"></a>TiDB实现Mysql分库分表合并数据同步</h2><h3 id="一、迁移工具TiDB-Data-Migration"><a href="#一、迁移工具TiDB-Data-Migration" class="headerlink" title="一、迁移工具TiDB Data Migration"></a>一、迁移工具TiDB Data Migration</h3><p>TiDB Data Migration，简称DM，一体化数据迁移任务管理平台，支持从MySQL或MariaDB到TiDB的全量数据迁移和增量数据复制。</p><p>DM 以 SQL 语句的形式将数据迁移到 TiDB 中，因此各个版本的 DM 都分别兼容所有版本的 TiDB。在生产环境中，推荐使用 DM 的最新已发布版本。</p><p>DM由主要由DM-master、DM-Worker和dmtcl组成，介绍参考<a href="https://docs.pingcap.com/zh/tidb-data-migration/v1.0/overview#%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6" target="_blank" rel="noopener">官方文档</a>。</p><h4 id="DM-master"><a href="#DM-master" class="headerlink" title="DM-master"></a>DM-master</h4><p>DM-master 负责管理和调度数据迁移任务的各项操作。</p><ul><li>保存 DM 集群的拓扑信息</li><li>监控 DM-worker 进程的运行状态</li><li>监控数据迁移任务的运行状态</li><li>提供数据迁移任务管理的统一入口</li><li>协调分库分表场景下各个实例分表的 DDL 迁移</li></ul><h4 id="DM-worker"><a href="#DM-worker" class="headerlink" title="DM-worker"></a>DM-worker</h4><p>DM-worker 负责执行具体的数据迁移任务。</p><ul><li>将 binlog 数据持久化保存在本地</li><li>保存数据迁移子任务的配置信息</li><li>编排数据迁移子任务的运行</li><li>监控数据迁移子任务的运行状态</li></ul><p>DM-worker 启动后，会自动迁移上游 binlog 至本地配置目录（如果使用 DM-Ansible 部署 DM 集群，默认的迁移目录为 <code>&lt;deploy_dir&gt;/relay_log</code>）。</p><h4 id="dmctl"><a href="#dmctl" class="headerlink" title="dmctl"></a>dmctl</h4><p>dmctl 是用来控制 DM 集群的命令行工具。</p><ul><li>创建、更新或删除数据迁移任务</li><li>查看数据迁移任务状态</li><li>处理数据迁移任务错误</li><li>校验数据迁移任务配置的正确性</li></ul><p>迁移过程中碰到一些问题如分库分表数据冲突、不支持DROP DATABASE/TABLE</p><h3 id="二、分库同步"><a href="#二、分库同步" class="headerlink" title="二、分库同步"></a>二、分库同步</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/202212081004553.png" alt></p><p>在上图的例子中，分表的合库合表过程简化成了上游只有两个 MySQL 实例，每个实例内只有一个表。假设在数据迁移开始时，将两个分表的表结构版本记为 schema V1，将 DDL 语句执行完后的表结构版本记为 schema V2。</p><p>现在，假设数据迁移过程中，DM-worker 内的 binlog 复制单元（sync）从两个上游分表收到的 binlog 数据有如下时序：</p><ol><li>开始迁移时，sync 从两个分表收到的都是 schema V1 版本的 DML 语句。</li><li>在 t1 时刻，sync 收到实例 1 上分表的 DDL 语句。</li><li>从 t2 时刻开始，sync 从实例 1 收到的是 schema V2 版本的 DML 语句；但从实例 2 收到的仍是 schema V1 版本的 DML 语句。</li><li>在 t3 时刻，sync 收到实例 2 上分表的 DDL 语句。</li><li>从 t4 时刻开始，sync 从实例 2 收到的也是 schema V2 版本的 DML 语句。</li></ol><p>假设在数据迁移过程中，不对分表的 DDL 语句进行额外处理。当实例 1 的 DDL 语句迁移到下游后，下游的表结构会变更成为 schema V2 版本。但在 t2 到 t3 这段时间内，sync 从实例 2 上收到的仍是 schema V1 版本的 DML 语句。当尝试把这些 schema V1 版本的 DML 语句迁移到下游时，就会由于 DML 语句与表结构的不一致而发生错误，从而无法正确迁移数据。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p><img src="https://download.pingcap.com/images/tidb-data-migration/shard-ddl-flow.png" alt="shard-ddl-flow"></p><p>在这个例子中，DM-worker-1 负责迁移来自 MySQL 实例 1 的数据，DM-worker-2 负责迁移来自 MySQL 实例 2 的数据，DM-master 负责协调多个 DM-worker 间的 DDL 迁移。</p><p>从 DM-worker-1 收到 DDL 语句开始，简化后的 DDL 迁移流程为：</p><ol><li>在 t1 时刻，DM-worker-1 收到来自 MySQL 实例 1 的 DDL 语句，自身暂停该 DDL 语句对应任务的 DDL 及 DML 数据迁移，并将 DDL 相关信息发送给 DM-master。</li><li>DM-master 根据收到的 DDL 信息判断得知需要协调该 DDL 语句的迁移，于是为该 DDL 语句创建一个锁，并将 DDL 锁信息发回给 DM-worker-1，同时将 DM-worker-1 标记为这个锁的 owner。</li><li>DM-worker-2 继续进行 DML 语句的迁移，直到在 t3 时刻收到来自 MySQL 实例 2 的 DDL 语句，自身暂停该 DDL 语句对应任务的数据迁移，并将 DDL 相关信息发送给 DM-master。</li><li>DM-master 根据收到的 DDL 信息判断得知该 DDL 语句对应的锁信息已经存在，于是直接将对应锁信息发回给 DM-worker-2。</li><li>根据任务启动时的配置信息、上游 MySQL 实例分表信息、部署拓扑信息等，DM-master 判断得知自身已经收到了来自待合表的所有上游分表的 DDL 语句，于是请求 DDL 锁的 owner（DM-worker-1）向下游迁移执行该 DDL。</li><li>DM-worker-1 根据第二步收到的 DDL 锁信息验证 DDL 语句执行请求；向下游执行 DDL，并将执行结果反馈给 DM-master；若 DDL 语句执行成功，则自身开始继续迁移后续的（从 t2 时刻对应的 binlog 开始的）DML 语句。</li><li>DM-master 收到来自 owner 执行 DDL 语句成功的响应，于是请求在等待该 DDL 锁的所有其他 DM-worker（DM-worker-2）忽略该 DDL 语句，直接继续迁移后续的（从 t4 时刻对应的 binlog 开始的）DML 语句。</li></ol><p>根据上面的流程，可以归纳出 DM 协调多个 DM-worker 间 sharding DDL 迁移的特点：</p><ul><li>根据任务配置与 DM 集群部署拓扑信息，DM-master 内部也会建立一个逻辑 sharding group 来协调 DDL 迁移，group 中的成员为负责处理该迁移任务拆解后的各子任务的 DM-worker。</li><li>各 DM-worker 从 binlog event 中收到 DDL 语句后，会将 DDL 信息发送给 DM-master。</li><li>DM-master 根据来自 DM-worker 的 DDL 信息及 sharding group 信息创建或更新 DDL 锁。</li><li>如果 sharding group 的所有成员都收到了某一条相同的 DDL 语句，则表明上游分表在该 DDL 执行前的 DML 语句都已经迁移完成，此时可以执行该 DDL 语句，并继续后续的 DML 迁移。</li><li>上游所有分表的 DDL 在经过 table router 转换后需要保持一致，因此仅需 DDL 锁的 owner 执行一次该 DDL 语句即可，其他 DM-worker 可直接忽略对应的 DDL 语句。</li></ul><p>在上面的示例中，每个 DM-worker 对应的上游 MySQL 实例中只有一个待合并的分表。但在实际场景下，一个 MySQL 实例可能有多个分库内的多个分表需要进行合并，这种情况下，sharding DDL 的协调迁移过程将更加复杂。</p><h3 id="三、分表同步"><a href="#三、分表同步" class="headerlink" title="三、分表同步"></a>三、分表同步</h3><p><img src="https://download.pingcap.com/images/tidb-data-migration/shard-ddl-example-2.png" alt="shard-ddl-example-2"></p><p>在这个例子中，由于数据来自同一个 MySQL 实例，因此所有数据都是从同一个 binlog 流中获得，时序如下：</p><ol><li>开始迁移时，DM-worker 内的 sync 从两个分表收到的数据都是 schema V1 版本的 DML 语句。</li><li>在 t1 时刻，sync 收到 table_1 分表的 DDL 语句。</li><li>从 t2 到 t3 时刻，sync 收到的数据同时包含 table_1 的 DML 语句（schema V2 版本）及 table_2 的 DML 语句（schema V1 版本）。</li><li>在 t3 时刻，sync 收到 table_2 分表的 DDL 语句。</li><li>从 t4 时刻开始，sync 从两个分表收到的数据都是 schema V2 版本的 DML 语句。</li></ol><p>假设在数据迁移过程中，不对分表的 DDL 语句进行额外处理。当 table_1 的 DDL 语句迁移到下游从而变更下游表结构后，table_2 的 DML 语句（schema V1 版本）将无法正常迁移。因此，在单个 DM-worker 内部，我们也构造了与 DM-master 内类似的逻辑 sharding group，但 group 的成员是同一个上游 MySQL 实例的不同分表。</p><p>DM-worker 内协调处理 sharding group 的迁移与 DM-master 处理 DM-worker 之间的迁移不完全一致，主要原因包括：</p><ul><li>当 DM-worker 收到 table_1 分表的 DDL 语句时，迁移不能暂停，需要继续解析 binlog 才能获得后续 table_2 分表的 DDL 语句，即需要从 t2 时刻继续解析直到 t3 时刻。</li><li>在继续解析 t2 到 t3 时刻的 binlog 的过程中，table_1 分表的 DML 语句（schema V2 版本）不能向下游迁移；但当 sharding DDL 迁移并执行成功后，这些 DML 语句则需要迁移到下游。</li></ul><p>DM-worker 内部 sharding DDL 迁移的简化流程为：</p><ol><li>在 t1 时刻，DM-worker 收到 table_1 的 DDL 语句，并记录 DDL 信息及此时的 binlog 位置点信息。</li><li>DM-worker 继续向前解析 t2 到 t3 时刻的 binlog。</li><li>对于 table_1 的 DML 语句（schema V2 版本），忽略；对于 table_2 的 DML 语句（schema V1 版本），正常迁移到下游。</li><li>在 t3 时刻，DM-worker 收到 table_2 的 DDL 语句，并记录 DDL 信息及此时的 binlog 位置点信息。</li><li>根据迁移任务配置信息、上游库表信息等，DM-worker 判断得知该 MySQL 实例上所有分表的 DDL 语句都已收到；于是将该 DDL 语句迁移到下游执行并变更下游表结构。</li><li>DM-worker 设置 binlog 流的新解析起始位置点为第一步时保存的位置点。</li><li>DM-worker 重新开始解析从 t2 到 t3 时刻的 binlog。</li><li>对于 table_1 的 DML 语句（schema V2 版本），正常迁移到下游；对于 table_2 的 DML 语句（schema V1 版本），忽略。</li><li>解析到达第四步时保存的 binlog 位置点，可得知在第三步时被忽略的所有 DML 语句都已经重新迁移到下游。</li><li>DM-worker 继续从 t4 时刻对应的 binlog 位置点开始正常迁移。</li></ol><p>综上可知，DM 在处理 sharding DDL 迁移时，主要通过两级 sharding group 来进行协调控制，简化的流程为：</p><ol><li>各 DM-worker 独立地协调对应上游 MySQL 实例内多个分表组成的 sharding group 的 DDL 迁移。</li><li>当 DM-worker 收到所有分表的 DDL 语句时，向 DM-master 发送 DDL 相关信息。</li><li>DM-master 根据 DM-worker 发来的 DDL 信息，协调由各 DM-worker 组成的 sharing group 的 DDL 迁移。</li><li>当 DM-master 收到所有 DM-worker 的 DDL 信息时，请求 DDL 锁的 owner（某个 DM-worker） 执行该 DDL 语句。</li><li>DDL 锁的 owner 执行 DDL 语句，并将结果反馈给 DM-master；自身开始重新迁移在内部协调 DDL 迁移过程中被忽略的 DML 语句。</li><li>当 DM-master 收到 owner 执行 DDL 成功的消息后，请求其他所有 DM-worker 继续开始迁移。</li><li>其他所有 DM-worker 各自开始重新迁移在内部协调 DDL 迁移过程中被忽略的 DML 语句。</li><li>在完成被忽略的 DML 语句的重新迁移后，所有 DM-worker 继续正常迁移。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> TiDB </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生僻字改造规划</title>
      <link href="/2022/10/10/sheng-pi-zi-gai-zao-gui-hua/"/>
      <url>/2022/10/10/sheng-pi-zi-gai-zao-gui-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="生僻字改造规划"><a href="#生僻字改造规划" class="headerlink" title="生僻字改造规划"></a>生僻字改造规划</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1、背景介绍"><a href="#1、背景介绍" class="headerlink" title="1、背景介绍"></a>1、背景介绍</h3><p>在过去，生僻字群众办理各类业务时采用人工书写汉字的方式，基本可以顺利开展业务。但随着信息化技术的发展，各类业务通过信息系统办理时出现姓名在信息系统中无法输入、存储、处理或显示的情况，导致生僻字与数字化转型显得 “格格不入”。</p><p>我行在业务开展过程中多次收到客户反馈因生僻字无法录入导致业务无法正常办理；存折上显示的客户姓名与身份证上的不一致等，引起客户不满。相比于原传统线下模式，数字化时代的线下处理需要投入更多时间成本，非生僻字人需要几秒钟的事情，生僻字人群可能需要 1 至 2 天，甚至无法短时间内解决，形成了生僻字客群眼前的一道 “数字鸿沟”。</p><h4 id="1-1-中文字符集的发展"><a href="#1-1-中文字符集的发展" class="headerlink" title="1.1 中文字符集的发展"></a>1.1 中文字符集的发展</h4><p><strong>GB2312</strong></p><p>GB2313 是中国国家标准简体中文字符集，由中国国家标准总局于1980年发布，支持的字符</p><ul><li>6763 个常用汉字</li><li>682 个其它字符</li></ul><p><strong>编码方式</strong></p><ul><li>兼容 ASCII 字符</li><li>新增汉字和其它字符使用<strong>两个字节</strong>编码</li></ul><p><strong>如何在字节流中区分 ASCII 字符与 GB2312 支持的字符</strong></p><ul><li>最高位 0 的字节是 ASCII 字符</li><li>最高位 1 的字节 + 后续的一个字节组成 GB 2312 支持的字符</li></ul><p>理论中的编码范围如下，实际上总共需要表示 7445 多个字符，只使用了一部分空间。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture0001.png" alt></p><hr><p><strong>BIG5</strong></p><p>由于 GB2312 不包括繁体字符，台湾同胞们不乐意了</p><p><strong>BIG5：</strong> BIG-5 码是通行于台湾、香港地区的一个繁体字编码方案。使用 2 个字节表示，表示13053 个汉字</p><hr><p><strong>GBK</strong></p><p>中国也有使用繁体字的需求，于是 GBK 增加了对繁体字的支持，在 <strong>1995 年</strong>被提出。兼容 GB2312，还是使用 2 个字节表示，可表示 21886 个字符</p><p>GBK 亦采用双字节表示，总体编码范围为 8140-FEFE，首字节在 81-FE 之间，尾字节在 40-FE 之间，剔除 xx7F 一条线。总计 23940 个码位，共收入 21886 个汉字和图形符号，其中汉字（包括部首和构件）21003 个，图形符号 883 个。</p><p>全部编码分为三大部分：</p><p><strong>1. 汉字区。包括：</strong></p><p>a. GB 2312 汉字区。即 GBK/2: B0A1-F7FE。收录 GB 2312 汉字 6763 个，按原顺序排列。</p><p>b. GB 13000.1 扩充汉字区。包括：</p><p>(1) GBK/3: 8140-A0FE。收录 GB 13000.1 中的 CJK 汉字 6080 个。</p><p>(2) GBK/4: AA40-FEA0。收录 CJK 汉字和增补的汉字 8160 个。CJK 汉字在前，按 UCS 代码大小排列；增补的汉字（包括部首和构件）在后，按《康熙字典》的页码/字位排列。</p><p><strong>2. 图形符号区。包括：</strong></p><p>a. GB 2312 非汉字符号区。即 GBK/1: A1A1-A9FE。其中除 GB 2312 的符号外，还有 10 个小写罗马数字和 GB 12345 增补的符号。计符号 717 个。</p><p>b. GB 13000.1 扩充非汉字区。即 GBK/5: A840-A9A0。BIG-5 非汉字符号、结构符和 “○” 排列在此区。计符号 166 个。</p><p><strong>3. 用户自定义区：分为(1)(2)(3)三个小区。</strong></p><p>(1) AAA1-AFFE，码位 564 个。</p><p>(2) F8A1-FEFE，码位 658 个。</p><p>(3) A140-A7A0，码位 672 个。</p><p>第 (3) 区尽管对用户开放，但限制使用，因为不排除未来在此区域增补新字符的可能性。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture0002.png" alt></p><hr><p><strong>GB18030</strong></p><p>随着计算机逐渐深入人民生活，发现有相当部分的人的名字包括生僻字，无法在计算机中表示。</p><p>GB18030 在 2005 年有中国国家标准化管理委员会提出。</p><ul><li>支持中国国内少数民族的文字</li><li>汉字收录范围包含繁体汉字以及日韩汉字</li></ul><p><strong>编码方式</strong></p><ul><li>1, 2, 4 个字节的变长编码</li><li>一个字节兼容 ASCII 编码</li><li>两个字节兼容 GBK 编码</li><li>四个字节支持新增的字符</li></ul><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture0003.png" alt></p><h4 id="1-2-生僻字问题"><a href="#1-2-生僻字问题" class="headerlink" title="1.2 生僻字问题"></a>1.2 生僻字问题</h4><ul><li><strong>输入/显示不支持：</strong>渠道类系统无法正常的输入和显示生僻字。</li><li><strong>通讯传输乱码：</strong>应用系统间通讯传输过程中，部分系统无法满足大字符集要求，导致转换乱码。</li><li><strong>数据存储不支持：</strong>应用系统使用的数据库字符集编码无法满足生僻字存储要求。</li><li><strong>硬件设备不支持：</strong>涉及打印、显示、识别等硬件设备内置字库无法满足生僻字要求。</li><li><strong>一字多码：</strong>因各地区编码合并，少量汉字存在一字多码的问题。</li></ul><h3 id="2、现状分析"><a href="#2、现状分析" class="headerlink" title="2、现状分析"></a>2、现状分析</h3><h4 id="2-1-现状分析"><a href="#2-1-现状分析" class="headerlink" title="2.1 现状分析"></a>2.1 现状分析</h4><p>目前我行 9000 万有效客户中，客户信息姓名非纯中文的客户 5892 个，拼音代替的一般为生僻字客户。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/part1.png" alt></p><p>客户生僻字表现的问题如要在以下几个方面：</p><ul><li>客户转账失败</li><li>客户信息无法修改</li><li>客户开户失败</li><li>应用系统数据卸数乱码</li><li>公安联网核查不通过</li><li>回盘文件比对失败</li></ul><h4 id="2-2-应用范围"><a href="#2-2-应用范围" class="headerlink" title="2.2 应用范围"></a>2.2 应用范围</h4><h3 id="3、术语定义"><a href="#3、术语定义" class="headerlink" title="3、术语定义"></a>3、术语定义</h3><table><thead><tr><th><strong>术语</strong></th><th align="left">简称/说明</th></tr></thead><tbody><tr><td>Unicode</td><td align="left">统一码（ Unicode ），也叫万国码、单一码，是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</td></tr><tr><td>Emoji</td><td align="left">Emoji 是一种特殊的 Unicode 编码，常见于 IOS 和 Android 手机上。</td></tr></tbody></table><h2 id="二、生僻字涉及领域"><a href="#二、生僻字涉及领域" class="headerlink" title="二、生僻字涉及领域"></a>二、生僻字涉及领域</h2><h3 id="1、操作系统"><a href="#1、操作系统" class="headerlink" title="1、操作系统"></a>1、操作系统</h3><p>当我们在键盘上输入一个字符之后，计算机会通过 Unicode ，将这个字符转换成二进制。</p><p>接下来，通过获得到的 Unicode 编码值，查询字体文件中的 Charmap ，把编码值转换成字形索引，一旦获得了字形索引你便可以装载对应的字形图像。之后，就可以对这个字形图像进行图形渲染，然后就可以显示在显示器上面了，因此需要将操作系统的 Unicode 满足升级到满足生僻字要求的版本，即 Unicode 13.0 版本以上。</p><p><strong>一个字符想要在电脑上显示出来，需要以下三个条件：</strong></p><p>1、输入法支持输入这个字符</p><p>2、Unicode 编码支持将这个字符转成二进制</p><p>3、计算机上安装的字体中包含这个字符</p><h3 id="2、字体"><a href="#2、字体" class="headerlink" title="2、字体"></a>2、字体</h3><p>如果 Unicode 中已经包含了某个生僻字，那么在展示的时候，就会通过得到的 Unicode 编码值，查询字体文件中的 Charmap，把编码值转换成字形索引。</p><p>但是，如果预装字体中不包含某些字符的话，也是无法展示的。</p><p>也就是说，如果输入法可以兼容最新版的 Unicode 13.0，并且操作系统也升级到了最新版的 Unicode 编码，也不意味着直接就可以显示像 “ biáng “ 这样被最新收录的生僻字。</p><p>因为这还依赖于操作系统中的字体是否包含这个字符。目前市面上有些商业字体是可以支持 CJK 中的很多扩展字符的。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/1665297723632.png" alt></p><h3 id="3、输入法"><a href="#3、输入法" class="headerlink" title="3、输入法"></a>3、输入法</h3><p>目前市面上比较常见的中文输入法，大多数都是采用的 GBK 作为字符集的，GBK 共收录 21886 个汉字和图形符号，其中汉字（包括部首和构件）21003 个，图形符号 883 个。但是中文汉字远不止 2 万多，所以，很多生僻字是无法通过输入法打出来的，如 “ Biángbiáng 面” 中的 biáng 字。</p><h3 id="4、软件编码"><a href="#4、软件编码" class="headerlink" title="4、软件编码"></a>4、软件编码</h3><p>Java开发过程中编解码的常见使用场景：</p><h4 id="4-1-流读取文件"><a href="#4-1-流读取文件" class="headerlink" title="4.1 流读取文件"></a>4.1 流读取文件</h4><p>具有转换编码功能的有：OutputStreamWriter 和 InputStreamReader</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建指定字符集的 InputStreamReader</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">,</span> String CharsetName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建使用指定字符集的 OutputStreamWriter</span><span class="token function">OutputStreamWriter</span><span class="token punctuation">(</span>OutputStream out<span class="token punctuation">,</span> String CharsetName<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">FileInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStreamReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> charset<span class="token punctuation">)</span><span class="token punctuation">;</span>StringBuffer buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每次调用 InputStreamReader 中的一个 read() 方法都会导致从底层输入流读取一个或多个字节。要启用从字节到字符的有效转换，可以提前从底层流读取更多的字节，使其超过满足当前读取操作所需的字节。API 解释非常清楚，InputStreamReader 在底层读取文件时仍然采用字节读取，读取字节后它需要根据一个指定的编码格式来解析为字符，如果没有指定编码格式则采用系统默认编码格式。</p><h4 id="4-2-处理字符串编码"><a href="#4-2-处理字符串编码" class="headerlink" title="4.2 处理字符串编码"></a>4.2 处理字符串编码</h4><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:/Users/Aurora/Desktop/test3.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过字节流转化为String的过程中如果我们不指定编码为UTF-8时，则默认使用系统编码格式（GBK）来解码操作，由于两者编码格式不一致，在构造 String 的过程中会产生乱码，文件内容为 “你好世界 Hello World” ，输出为 “浣犲ソ涓栫晫 Hello World” 。</p><h4 id="4-3-处理请求参数传递编码"><a href="#4-3-处理请求参数传递编码" class="headerlink" title="4.3 处理请求参数传递编码"></a>4.3 处理请求参数传递编码</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对字符串进行编码</span>java中编码：URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>strUri<span class="token punctuation">,</span> “UTF<span class="token operator">-</span><span class="token number">8</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对字符串进行解码</span>java中解码：URLDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>strUri<span class="token punctuation">,</span> “UTF<span class="token operator">-</span><span class="token number">8</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-4-内存"><a href="#4-4-内存" class="headerlink" title="4.4 内存"></a>4.4 内存</h4><h4 id="4-5-JAVAWEB编码"><a href="#4-5-JAVAWEB编码" class="headerlink" title="4.5 JAVAWEB编码"></a>4.5 JAVAWEB编码</h4><p>通过下图我们可以了解到JAVAWEB中有哪些地方有转码：</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/JAVAWEB.png" alt></p><p>用户想服务器发送一个 HTTP 请求，需要编码的地方有 url、cookie、parameter，经过编码后服务器接受 HTTP 请求，解析 HTTP 请求，然后对 url、cookie、parameter 进行解码。在服务器进行业务逻辑处理过程中可能需要读取数据库、本地文件或者网络中的其他文件等等，这些过程都需要进行编码解码。当处理完成后，服务器将数据进行编码后发送给客户端，浏览器经过解码后显示给用户。在这个整个过程中涉及的编码解码的地方较多，其中最容易出现乱码的位置就在于服务器与客户端进行交互的过程。</p><h5 id="4-5-1-URL方式直接访问"><a href="#4-5-1-URL方式直接访问" class="headerlink" title="4.5.1 URL方式直接访问"></a>4.5.1 URL方式直接访问</h5><p>首先看URL的组成部分：</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture0004.png" alt></p><p>在URL中，浏览器将会对path和parameter进行编码操作。为了更好地解释编码过程，使用如下URL</p><pre class=" language-https"><code class="language-https">http://127.0.0.1:8080/perbank/我是cm?name=我是cm</code></pre><p>将以上地址输入进Chrome浏览器和IE浏览器中</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9waWFuc2hlbi5jb20vaW1hZ2VzLzQwOC9hYzVmN2ZmYzZkYjQ2NTg5OGViZTI3MWY1YTcxYjNkOC5wbmc=" alt></p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9waWFuc2hlbi5jb20vaW1hZ2VzLzgzMi83MGQ5Y2Y0ZTUzODkyNjkxMzhhN2NhZDBiZmMxNWY4MC5wbmc=" alt></p><p>可以看到各大浏览器对 “我是” 的编码情况如下：</p><table><thead><tr><th></th><th>path部分</th><th>Query String</th></tr></thead><tbody><tr><td>Chrome</td><td>E6 88 91 E6 98 AF</td><td>E6 88 91 E6 98 AF</td></tr><tr><td>IE</td><td>E6 88 91 E6 98 AF</td><td>CE D2 CA C7</td></tr></tbody></table><p>对于path部分，chrome和IE都是采用utf-8编码格式，对于Query String部分，chrome采用的是utf-8编码，IE采用GBK。</p><p>当然对于不同的浏览器，相同浏览器不同版本，不同的操作系统等环境都会导致编码结果不同，上表某一种情况，对于URL编码规则下任何结论都是过早的。</p><p>解析请求的 URL 是在 org.apache.coyote.HTTP11.InternalInputBuffer 的 parseRequestLine 方法中，这个方法把传过来的 URL 的 byte[] 设置到 org.apache.coyote.Request 的相应的属性中。这里的 URL 仍然是 byte 格式，转成 char 是在 org.apache.catalina.connector.CoyoteAdapter 的 convertURI 方法中完成的：</p><p>对 URL 的解码操作是首先获取 Connector 的解码集，该配置在 server.xml 中</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>Connector URIEncoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>如果没有定义则会采用默认编码ISO-8859-1来解析。</p><p>从上面代码可以看出对 query String 的解码格式要么采用设置的编码，要么采用默认的解码格式 ISO-8859-1</p><p>URIEncoding 是对所有 GET 方式的请求的数据进行统一的重新编码（解码），而 useBodyEncodingForURI 是根据 post 请求的编码决定URI的编码</p><p>上面部分详细介绍了 URL 方式请求的编码解码过程。其实对于我们而言，我们更多的方式是通过表单的形式来提交。</p><h5 id="4-5-2-表单GET和POST"><a href="#4-5-2-表单GET和POST" class="headerlink" title="4.5.2 表单GET和POST"></a>4.5.2 表单GET和POST</h5><p><strong>表单GET</strong></p><p>当用户点击 submit 提交表单时，浏览器会根据设定的编码来编码数据传递给服务器。通过GET方式提交的数据都是拼接在 URL 后面（可以当做 query String ）来提交的，所以tomcat服务器在进行解码过程中URIEncoding就起到作用了。tomcat服务器会根据设置的URIEncoding来进行解码，如果没有设置则会使用默认的ISO-8859-1来解码。假如我们在页面将编码设置为UTF-8，而URIEncoding设置的不是或者没有设置，那么服务器进行解码时就会产生乱码。这个时候我们一般可以通过new String(request.getParameter(“name”).getBytes(“iso-8859-1”),”utf-8”) 的形式来获取正确数据。</p><p><strong>表单POST</strong></p><p>对于POST方式，它采用的编码也是由页面来决定的即contentType。当我通过点击页面的submit按钮来提交表单时，浏览器首先会根据contentType的charset编码格式来对POST表单的参数进行编码然后提交给服务器，在服务器端同样也是用contentType中设置的字符集来进行解码（这里与get方式就不同了），这就是通过POST表单提交的参数一般而言都不会出现乱码问题。当然这个字符集编码我们是可以自己设定的：request.setCharacterEncoding(charset) 。</p><h4 id="4-6-JSP页面编码"><a href="#4-6-JSP页面编码" class="headerlink" title="4.6 JSP页面编码"></a>4.6 JSP页面编码</h4><p>我们知道JSP页面是需要转换为servlet的，在转换过程中肯定是要进行编码的。在JSP转换为servlet过程中下面一段代码起到至关重要的作用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span> pageEncoding<span class="token operator">=</span><span class="token string">"GBK"</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>在上面代码中有两个地方存在编码：pageEncoding、contentType的charset。其中<strong>pageEncoding是jsp文件本身的编码，而contentType的charset是指服务器发送给客户端时的内容编码。</strong></p><p>在前面一篇博客中就提到过jsp在转换为Servlet的过程中是需要经过主要的三次编码转换过程（除去<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener">数据库</a>编码转换、页面参数输入编码转换）：</p><p>第一次：转换为.java文件；</p><p>第二次：转换为.class文件；</p><p>第三次：业务逻辑处理后输出。</p><p><strong>第一阶段</strong></p><p>JVM将JSP编译为.jsp文件。在这个过程中pageEncoding就起到作用了，JVM首先会获取pageEncoding的值，如果该值存在则采用它设定的编码来编译，否则则采用file.encoding编码来编译。</p><p><strong>第二阶段</strong></p><p>JVM将.java文件转换为.class文件。在这个过程就与任何编码的设置都没有关系了，不管JSP采用了什么样的编码格式都将无效。经过这个阶段后.jsp文件就转换成了统一的Unicode格式的.class文件了。</p><p><strong>第三阶段</strong></p><p>后台经过业务逻辑处理后将产生的结果输出到客户端。在这个过程中contentType的charset就发挥了功效。如果设置了charset则浏览器就会使用指定的编码格式进行解码，否则采用默认的ISO-8859-1编码格式进行解码处理。</p><p>流程如如下：</p><p><img src="https://www.likecs.com/default/index/img?u=aHR0cHM6Ly9waWFuc2hlbi5jb20vaW1hZ2VzLzk1My9mOGZjZjQxMjNmMjFmNTA4MzI3ZjcwZGNkMjZjYWIwOS5KUEVH" alt></p><blockquote><p>转载自<a href="https://blog.csdn.net/weixin_29021291/article/details/114234494" target="_blank" rel="noopener">java中文解码_java中文乱码解决之道（六）—–javaWeb中的编码解码_hey one的博客-CSDN博客</a></p></blockquote><h3 id="5、数据库编码"><a href="#5、数据库编码" class="headerlink" title="5、数据库编码"></a>5、数据库编码</h3><p>数据库在使用默认编码如 Oracle 使用 <strong>ZHS16GBK</strong>，Mysql使用 <strong>UTF-8</strong> 编码时，在保存生僻字或 emoji 字符时会异常乱码，无法正常保存。</p><p>以 Mysql 为例，由官方文档可知，Mysql 支持的 utf8 编码最大字符长度为 3 字节，如果遇到 4 字节的宽字符就会插入异常了。三个字节的 UTF-8 最大能编码的 Unicode 字符时 0xffff，也就是 Unicode 中的基本多文种平面 （BMP） 。任何不在基本多文本平面的 Unicode字符，都无法使用 Mysql 的 utf8 字符集存储，包括 emoji 表情和很多不常用的汉字，以及任何新增的 Unicode 字符等。</p><p>要在 Mysql 中保存 4 字节长度的 UTF-8 字符，需要使用 utf8mb4 字符集，该字符集只有 5.5.3 版本以后才支持。</p><h4 id="5-1-MYSQL"><a href="#5-1-MYSQL" class="headerlink" title="5.1 MYSQL"></a>5.1 MYSQL</h4><p>MYSQL数据库建议使用 uft8mb4 字符集满足生僻字的存储。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/mysql-setting.png" alt="Mysql字符集设置"></p><h4 id="5-2-Oracle"><a href="#5-2-Oracle" class="headerlink" title="5.2 Oracle"></a>5.2 Oracle</h4><p>Oracle 数据库解决方案如下：</p><ul><li>使用 AL32UTF8 字符集满足生僻字的存储。</li><li>不修改数据库字符集，在应用层实现生僻字转储读写。</li></ul><h5 id="5-2-1-AL32UTF8"><a href="#5-2-1-AL32UTF8" class="headerlink" title="5.2.1 AL32UTF8"></a>5.2.1 AL32UTF8</h5><p>需要注意，不可直接去修改已经有数据的数据库的字符集，否则，新写进去的数据是没问题了，以前的数据就会产生乱码了，因此需要通过数据导出导入的方式迁移数据。</p><ul><li>查看当前数据库使用的字符集</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> userenv<span class="token punctuation">(</span><span class="token string">'language'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/oracle-al16utf8.png" alt></p><h5 id="5-2-2-生僻字转义读写"><a href="#5-2-2-生僻字转义读写" class="headerlink" title="5.2.2 生僻字转义读写"></a>5.2.2 生僻字转义读写</h5><p>转义读写存储数据库的生僻字，须整理代码改动涉及的内容以及制定出高效的修改方案。转义读写存储数据库生僻字是先将生僻字转换为 Unicode，如”㛃” 转为 Unicode 为 “\u36c3”（注意：\u 是 Unicode 的转义字符，使用的时候要去掉），读的时候采用以下 SQL 转换:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> utl_raw<span class="token punctuation">.</span>cast_to_nvarchar2<span class="token punctuation">(</span><span class="token string">'36c3'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span></code></pre><h3 id="6、硬件设备"><a href="#6、硬件设备" class="headerlink" title="6、硬件设备"></a>6、硬件设备</h3><h4 id="6-1-打印设备"><a href="#6-1-打印设备" class="headerlink" title="6.1 打印设备"></a>6.1 打印设备</h4><h5 id="6-1-1-激光打印机"><a href="#6-1-1-激光打印机" class="headerlink" title="6.1.1 激光打印机"></a>6.1.1 激光打印机</h5><p>激光打印机要将文件打印处理，需要经过 2 个阶段：数据传输和静电成像。</p><p>当用户选择了要打印的文档，并按下了打印按钮，计算机会把要打印的文档通过打印机端口传送给打印机，打印语言会对文档内容进行翻译，并转换成打印机可以识别的语言，这样才能将文件打印到纸上。</p><p>打印机和电脑想要通信，必须通过有线或者无线连接。有线接口分为: usb (串口)和LPT (并口)，以及RJ45 (网络接口)。</p><p><strong>打印机语言分为: PS和PCL以及GDI还有佳能公司的UFR II</strong></p><p>PCL打印语言(Printing Control Language)是惠普公司的专利，这个专利是开放式的完全免费，所有打印机厂商都可以使用，兼容性最好。</p><p>PS打印语言(Postscript) Adobe公司的专利，打印机厂家必须付费才能使用， 因此搭载Postscript语言的打印机售价较高。</p><p>GDI打印语言(Windows GDI)，是Windows自带的打印语言，也就是说完全是免费的。不过，现在已经很少有打印机支持。GDI语言一般用于内存较小的机型，也就是低端打印机。</p><p>当用户点击打印按钮之后，计算机会先调用操作系统提供的GDI函数,对打印文件进行光栅化处理，这时计算机已经完成了对打印内容的“翻译”打印机只需要负责接受命令即可，这对于低端打印机来说也算是个福音。</p><p>UFR II（Ultra Fast Rendering）则是佳能公司所专有的一种打印语言，与 PCL 语言相似，但集 PCL 之快速与 PostScript 之多用的优点于一身，摒弃了两者之缺陷。</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/103868139" target="_blank" rel="noopener">绝对原创！绝对干货！激光打印机工作原理！ - 知乎 (zhihu.com)</a></p></blockquote><h5 id="6-1-2-针式打印机"><a href="#6-1-2-针式打印机" class="headerlink" title="6.1.2 针式打印机"></a>6.1.2 针式打印机</h5><p><strong>字符打印：</strong></p><p>由打印机自己从所带的点阵字符库中取出对应字符的点阵数据（打印数据）经字型变换（如果需要的话）处理后，送往打印针驱动电路进行打印。</p><p><strong>位图打印：</strong></p><p>位图打印方式是由计算机进行要打印数据的生成，并将生成的数据送往打印机，打印机不需要进行打印数据的处理，可以直接将其打印出来；在位图像方式下，计算机生成的打印数据可以是一副图像或图形，也可以是汉字。</p><h4 id="6-2-识别设备"><a href="#6-2-识别设备" class="headerlink" title="6.2 识别设备"></a>6.2 识别设备</h4><h5 id="6-2-1-高拍仪"><a href="#6-2-1-高拍仪" class="headerlink" title="6.2.1 高拍仪"></a>6.2.1 高拍仪</h5><p>高拍仪根据各家供应商内置的身份证阅读器模块提供与身份证阅读器相同功能服务。</p><h5 id="6-2-2-身份证阅读器"><a href="#6-2-2-身份证阅读器" class="headerlink" title="6.2.2 身份证阅读器"></a>6.2.2 身份证阅读器</h5><p>PC通过SAM模块将读卡指令转发给主控MCU，主控MCU通过射频模块与身份证进行通讯，将读到的身份证信息通过SAM模块进行解码返回给PC，解码的过程需要有相应的字库。</p><h4 id="6-3-显示设备"><a href="#6-3-显示设备" class="headerlink" title="6.3 显示设备"></a>6.3 显示设备</h4><h5 id="6-3-1-柜外清"><a href="#6-3-1-柜外清" class="headerlink" title="6.3.1 柜外清"></a>6.3.1 柜外清</h5><p>柜外清整合了密码键盘评价器 对讲机等银行柜外的所有产品于一体，使柜面整齐美观 。柜外清有3.5寸 5.6寸 7寸屏幕外形美观大方，界面丰富可以插播广告。本产品是嵌入式产品性能稳定。密码键盘模块有DES 、3DES 加密模式 ，乱序键盘 ，利用液晶触控方式，液晶表面的防窥膜保证液晶屏幕只能在一定的角度下才能看到屏幕内容，支持U盘升级为今后客户升级提供了方便。</p><p>主要为Android操作系统，升级内嵌字库即可</p><h5 id="6-3-2-大屏"><a href="#6-3-2-大屏" class="headerlink" title="6.3.2 大屏"></a>6.3.2 大屏</h5><h4 id="6-4-一体化自助机具"><a href="#6-4-一体化自助机具" class="headerlink" title="6.4 一体化自助机具"></a>6.4 一体化自助机具</h4><p>自助机具由多种硬件模块组成，与字库编码相关的包括操作系统显示、打印设备、识别设备，每一个模块由不同的应用供应商提供，实现原理与单硬件设备相同。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1、问题痛点"><a href="#1、问题痛点" class="headerlink" title="1、问题痛点"></a>1、问题痛点</h3><h4 id="1-1-输入-显示不支持"><a href="#1-1-输入-显示不支持" class="headerlink" title="1.1 输入 \ 显示不支持"></a>1.1 输入 \ 显示不支持</h4><p>渠道系统无法正常的输入和显示生僻字，分为C/S架构和B/S架构端。</p><h5 id="1-1-1-办公-生产计算机终端"><a href="#1-1-1-办公-生产计算机终端" class="headerlink" title="1.1.1 办公 \ 生产计算机终端"></a>1.1.1 办公 \ 生产计算机终端</h5><p>此类设备一般为企业为员工提供的专用计算机终端设备，具备统一的型号和基础软件应用，在不影响正常的生产办公使用前提下，尽可能保持员工个人的使用习惯和体验。</p><p><strong>解决方案：</strong></p><ul><li>采购业内已支持新国标GB18030-2022标准的输入法，输入法功能完善，输入方式多样化，针对生僻字应有多种输入手段及提示方法，有效区分正式码和PUA码。</li></ul><h5 id="1-1-2-客户个人移动设备和计算机终端"><a href="#1-1-2-客户个人移动设备和计算机终端" class="headerlink" title="1.1.2 客户个人移动设备和计算机终端"></a>1.1.2 客户个人移动设备和计算机终端</h5><p>企业无法要求使用企业相关产品的客户个人的操作习惯，无法强制要求客户安装各类输入法满足生僻字的输入需求。因此，企业往往需要在提供的产品内部集成生僻字输入法相关插件或工具，满足客户在使用企业产品过程中的生僻字输入需求。</p><p><strong>解决方案：</strong></p><ul><li>采用云字库的解决方案，云字库产品提供API或SDK供企业产品集成，当客户有生僻字输入需求时，通过点击按钮或其他方式触发产品内集成的软键盘，通过软键盘拼音或笔画等方式输入生僻字，从云端获取生僻字信息并录入到当前输入框中。</li></ul><h4 id="1-2-通讯传输乱码"><a href="#1-2-通讯传输乱码" class="headerlink" title="1.2 通讯传输乱码"></a>1.2 通讯传输乱码</h4><p>应用系统间通讯传输过程中，部分系统无法满足大字符集要求，导致转换乱码。</p><p><strong>解决方案：</strong></p><ul><li>统一应用编码</li><li>涉及到编码的位置指定编码使用 GB18030 或者 UTF-8</li><li>修改系统默认编码为 UTF-8</li></ul><h4 id="1-3-数据存储不支持"><a href="#1-3-数据存储不支持" class="headerlink" title="1.3 数据存储不支持"></a>1.3 数据存储不支持</h4><p>应用系统使用的数据库字符集无法满足生僻字存储要求。</p><p><strong>解决方案：</strong>修改数据库编码</p><ul><li><p>Oracle：字符编码修改为 AL32UTF8</p><p><strong>影响：</strong></p><ul><li><p>该字符版本在 Oracle 9i 版本以上才支持。Oracle 数据库将字符编码修改为 AL32UTF8 时，相比字符编码 AL16UTF8 ，数据空间占用扩大了一倍。</p></li><li><p>不可直接去修改已经有数据的数据库的字符集，否则，新写进去的数据是没问题了，以前的数据就会产生乱码了，因此需要通过数据导出导入的方式迁移数据。</p></li></ul></li><li><p>Mysql：字符编码修改为UTF8MB4</p><p>影响：</p></li></ul><h4 id="1-4-硬件设备不支持"><a href="#1-4-硬件设备不支持" class="headerlink" title="1.4 硬件设备不支持"></a>1.4 硬件设备不支持</h4><p>涉及打印、显示、识别等硬件设备内置字库无法满足生僻字要求。</p><h4 id="1-5-一字多码"><a href="#1-5-一字多码" class="headerlink" title="1.5 一字多码"></a>1.5 一字多码</h4><p>因GBK、GB2312等编码合并，少量汉字存在一字多码的情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生僻字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线重定义</title>
      <link href="/2022/01/17/zai-xian-chong-ding-yi/"/>
      <url>/2022/01/17/zai-xian-chong-ding-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="转载-在线重定义"><a href="#转载-在线重定义" class="headerlink" title="[转载]在线重定义"></a>[转载]在线重定义</h2><p>转载：<a href="http://www.itpub.net/thread-2096594-1-1.html" target="_blank" rel="noopener">http://www.itpub.net/thread-2096594-1-1.html</a></p><p>ORACLE提供了一个DBMS_REDEFINITION包用于在线重定义操作，主要包含三个过程： </p><p><strong>DBMS_REDEFINITION.START_REDEF_TABLE</strong> </p><p>​        这个过程首先会创建一个快速刷新的物化视图作为过渡表，然后将源表的数据加载到过渡表中，并在源表上创建物化视图日志，以支持快速刷新同步数据 </p><p><strong>DBMS_REDEFINITION.SYNC_INTERIM_TABLE</strong> </p><p>​        用来把源表中的数据同步到过渡表 </p><p><strong>DBMS_REDEFINITION.FINISH_REDEF_TABLE</strong> </p><p>​        这个过程的操作步骤比较多，也是做在线重定义时需要特别注意的，但其执行时间通常是非常短的： </p><ol><li>先调用一次DBMS_REDEFINITION.SYNC_INTERIM_TABLE，同步数据 </li><li>锁定源表，锁定之后表数据不再允许发生变化 </li><li>再调用一次DBMS_REDEFINITION.SYNC_INTERIM_TABLE，同步数据 </li><li>交换源表和过渡表的表名 </li><li>删除物化视图和物化视图日志 </li><li>释放表锁资源 </li></ol><p><strong>将普通表改造成分区表</strong> </p><ol><li>在线重定义的操作过程 </li><li>将一个2000万数据量的表进行重定义，需要多长时间 </li><li>在线重定义期间，表相关的操作是否受影响，又是如何影响的 </li></ol><p><strong>使用在线重定义技术，以下情况是需要注意的：</strong> </p><ul><li><p>如果离线操作能够解决问题，就不要用在线重定义例如一些静态数据、历史数据的归档迁移，可使用CTAS、alter table move、或导出导入完成</p></li><li><p>表空间至少要留有比源表所用空间更大的剩余空间 </p></li><li><p>在线重定义的操作过程耗时较长，但对业务的影响最小 </p></li><li><p>要注意源表上的事务操作，如果过于频繁，可能会发生较严重的等待</p></li></ul><h3 id="1、检查用户权限"><a href="#1、检查用户权限" class="headerlink" title="1、检查用户权限"></a>1、检查用户权限</h3><p>运行DBMS_REDEFINITION包需要以下权限： </p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span> <span class="token keyword">Execute</span> privilege <span class="token keyword">to</span> DBMS_REDEFINITION<span class="token operator">-</span> <span class="token keyword">Create</span> <span class="token keyword">any</span> <span class="token keyword">table</span><span class="token operator">-</span> <span class="token keyword">Alter</span> <span class="token keyword">any</span> <span class="token keyword">table</span><span class="token operator">-</span> <span class="token keyword">Drop</span> <span class="token keyword">any</span> <span class="token keyword">table</span><span class="token operator">-</span> <span class="token keyword">Lock</span> <span class="token keyword">any</span> <span class="token keyword">table</span><span class="token operator">-</span> <span class="token keyword">Select</span> <span class="token keyword">any</span> <span class="token keyword">table</span><span class="token operator">-</span> <span class="token keyword">Create</span> <span class="token keyword">any</span> <span class="token keyword">index</span><span class="token operator">-</span> <span class="token keyword">Create</span> <span class="token keyword">any</span> <span class="token keyword">trigger</span></code></pre><p>可进入用户后执行以下SQL进行检查确认： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> session_privs<span class="token punctuation">;</span></code></pre><h3 id="2、模拟创建一个源表，并插入测试数据"><a href="#2、模拟创建一个源表，并插入测试数据" class="headerlink" title="2、模拟创建一个源表，并插入测试数据"></a>2、模拟创建一个源表，并插入测试数据</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%891.png" alt></p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%892.png" alt></p><h3 id="3、模拟业务发生场景，一直持续到所有操作结束"><a href="#3、模拟业务发生场景，一直持续到所有操作结束" class="headerlink" title="3、模拟业务发生场景，一直持续到所有操作结束"></a>3、模拟业务发生场景，一直持续到所有操作结束</h3><p>​        按查询更新插入比例为7:1:2模拟，TPS为10，即每秒发生7笔查询、1笔更新、2笔插入操作，这个负载并不算大，但是变更通常选在空闲时间段,而且对于单表来说已经算很高的负载了。</p><h3 id="4、按需求创建一个已分区的中间表"><a href="#4、按需求创建一个已分区的中间表" class="headerlink" title="4、按需求创建一个已分区的中间表"></a>4、按需求创建一个已分区的中间表</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%893.png" alt></p><p>以上步骤完成准备工作，开始执行在线重定义过程。</p><h3 id="5、检查源表是否具备在线重定义的条件"><a href="#5、检查源表是否具备在线重定义的条件" class="headerlink" title="5、检查源表是否具备在线重定义的条件"></a>5、检查源表是否具备在线重定义的条件</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%894.png" alt></p><h3 id="6、开始在线重定义，这一步相当于初始化工作，耗时比较长"><a href="#6、开始在线重定义，这一步相当于初始化工作，耗时比较长" class="headerlink" title="6、开始在线重定义，这一步相当于初始化工作，耗时比较长"></a>6、开始在线重定义，这一步相当于初始化工作，耗时比较长</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%895.png" alt></p><h3 id="7、在中间表上创建约束和索引并收集统计信息"><a href="#7、在中间表上创建约束和索引并收集统计信息" class="headerlink" title="7、在中间表上创建约束和索引并收集统计信息"></a>7、在中间表上创建约束和索引并收集统计信息</h3><p>这一步提前做，可以防止重定义完成后，新表没有可用索引，而产生性能问题。 </p><p>oracle提供了dbms_redefinition.copy_table_dependents过程，用于复制源表上的索引、约束、触发器、权限等依赖关系 </p><p>到中间表，但是这个包存在的BUG也不少，可以选择性使用。 </p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%896.png" alt></p><p>这一步执行之后,可以再做一次手工同步刷新,耗时15秒 </p><h3 id="8、手工同步数据，将上一步执行中将产生的数据先做同步刷新"><a href="#8、手工同步数据，将上一步执行中将产生的数据先做同步刷新" class="headerlink" title="8、手工同步数据，将上一步执行中将产生的数据先做同步刷新"></a>8、手工同步数据，将上一步执行中将产生的数据先做同步刷新</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%897.png" alt></p><h3 id="9、完成在线重定义过程，执行后，中间表和源表的表名互换"><a href="#9、完成在线重定义过程，执行后，中间表和源表的表名互换" class="headerlink" title="9、完成在线重定义过程，执行后，中间表和源表的表名互换"></a>9、完成在线重定义过程，执行后，中间表和源表的表名互换</h3><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%898.png" alt></p><h3 id="10、删除中间表，并将索引重命名回来"><a href="#10、删除中间表，并将索引重命名回来" class="headerlink" title="10、删除中间表，并将索引重命名回来"></a>10、删除中间表，并将索引重命名回来</h3><p>此时的中间表已经是原来未分区的普通表，而源表已经变成了分区表</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%899.png" alt></p><p>至此，使用在线重定义进行表分区改造的工作已经完成。通过各个步骤的耗时情况可以看到，在我们模拟压力的情况下，整个过程耗时12分钟，而最关键的finish_redef_table步 骤，也就是会锁表的步骤，只有2秒就完成了。监控数据库的活动会话、DBTIME等数据，没有感觉到数据库的明显变化。 </p><p>接下来把模拟压力增加到TPS 100，即每秒发生7笔查询、1笔更新、2笔插入操作，整个操作过程源表上DML的变化趋势图如下：</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/%E5%9C%A8%E7%BA%BF%E9%87%8D%E5%AE%9A%E4%B9%8910.png" alt></p><p>DML操作略有波动，但每一秒钟都存在DML操作，也就是说在这种压力之下，锁表的时间仍然是毫秒级。这组数据也 论证了使用在线重定义进行分区表改造的可行性和稳定性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL问题记录汇总</title>
      <link href="/2021/09/24/mysql-wen-ti-ji-lu-hui-zong/"/>
      <url>/2021/09/24/mysql-wen-ti-ji-lu-hui-zong/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql-问题记录汇总："><a href="#Mysql-问题记录汇总：" class="headerlink" title="Mysql 问题记录汇总："></a>Mysql 问题记录汇总：</h3><h4 id="1、应用疲劳性压测"><a href="#1、应用疲劳性压测" class="headerlink" title="1、应用疲劳性压测"></a>1、应用疲劳性压测</h4><p>多并发情况下同时对数据库进行 <strong>select、insert、update</strong> 操作，6小时左右出现连接池连接耗尽，连接数据库失败。</p><p><strong>show full processlist</strong> 查看数据库中存在大量 <strong>insert、update</strong> 操作积压。通过问题排查，定位为 <strong>binlog</strong> 写满导致磁盘空间不足。</p><p><strong>疑问1：应用使用的阿里Druid连接池并设置了超时时间60秒，在数据库操作执行超时的情况下，应用侧未捕获的超时异常。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人口信息生僻字合法性校验</title>
      <link href="/2021/09/14/ren-kou-xin-xi-sheng-pi-zi-wen-ti/"/>
      <url>/2021/09/14/ren-kou-xin-xi-sheng-pi-zi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="人口信息生僻字合法性校验"><a href="#人口信息生僻字合法性校验" class="headerlink" title="人口信息生僻字合法性校验"></a>人口信息生僻字合法性校验</h2><p>随着反洗钱等监管要求，对客户信息的准确性要求越来越高，大量客户需要补全个人身份信息，以往未重视的姓名生僻字问题又再一次被提出需尽快解决。生僻字问题一直存在，从“龙天”到“艹频”，生僻字问题主要涉及生僻字的输入、输出、通信传输、数据存储、信息打印等。</p><p>市面上针对生僻字也有许多解决方案，诸如专用的生僻字输入法或云字库等，在这里不做细谈。</p><p>本文章主要介绍在使用 GB18030 编码字库时，对扩展汉字的合法性校验。</p><p>合法性校验编码范围如下：</p><pre class=" language-xml"><code class="language-xml">CJK基本（基本+）：[4E00-9FFF] ---- 10进制区间：[19968-40959]CJK扩展A：[3400-4DBF] ---- 10进制区间：[13312-19903]CJK兼容：[E000-FAFF] ---- 10进制区间：[57344-64255]CJK扩展B：[20000-2A6D6] ---- 10进制区间：[131072-173782]CJK扩展C：[2A700-2B734] ---- 10进制区间：[173824-177972]CJK扩展D：[2B740-2B81D] ---- 10进制区间：[177984-178205]CJK扩展E：[2B820-2CEAF] ---- 10进制区间：[178208-183983]CJK扩展F：[2CEB0-2EBE0] ---- 10进制区间：[183984-191456]CJK扩展G：[30000-3134A] ---- 10进制区间：[196608-201546]</code></pre><hr><p>字符串是 GBK 编码时，一个汉字占用两个字节， GB18030 编码存在生僻字使用 4 字节的编码方式，转换 Unicode 编码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckChinese</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1 <span class="token operator">=</span> <span class="token string">"复"</span><span class="token punctuation">;</span>        String str2 <span class="token operator">=</span> <span class="token string">"复𬟁"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cnToUnicode</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cnToUnicode</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    * 中文转Unicode    * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">cnToUnicode</span><span class="token punctuation">(</span>String cn<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> cn<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String returnStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            returnStr <span class="token operator">+=</span> <span class="token string">"\\u"</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> returnStr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-xml"><code class="language-xml">\u590d\u590d\ud871\udfc1Process finished with exit code 0</code></pre><p>传统 GBK 汉字合法性校验正则表达式不再适用：</p><pre class=" language-xml"><code class="language-xml">/^[\u4e00-\u9fa5]+$/i;</code></pre><h3 id="CheckCNFormat"><a href="#CheckCNFormat" class="headerlink" title="CheckCNFormat()"></a>CheckCNFormat()</h3><p>我采用将16进制编码转换成10进制编码比较生僻字是否在合法性校验范围内来判断输入字符串是否合法，方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckCNFormat</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>        String fonts <span class="token operator">=</span> <span class="token string">"测试㛓𬎆"</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token function">isCNFormat</span><span class="token punctuation">(</span>fonts<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汉字合法性校验通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汉字合法性校验不通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 汉字合法性校验     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isCNFormat</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算字符串字节长度</span>        <span class="token keyword">int</span> cpcount <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">codePointCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//offsetByCodePoints(int ,int )方法返回String中从给定的index处偏移codePointOffset个代码点的索引。</span>        <span class="token keyword">int</span> firCodeIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String起点索引</span>        <span class="token keyword">int</span> lstCodeIndex <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">offsetByCodePoints</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cpcount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String终点索引</span>        <span class="token comment" spellcheck="true">//java.lang.Character.isSupplementaryCodePoint(int codePoint)是java中的内置方法，用于确定指定字符(Unicode代码点)是否在补充字符范围内。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> firCodeIndex<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> lstCodeIndex<span class="token punctuation">;</span> index <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isSupplementaryCodePoint</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String reg <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符：【"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】--10进制："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RangeJudge</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符：【"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】--16进制编码："</span> <span class="token operator">+</span> reg <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> <span class="token string">"合法性校验不通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字符：【"</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toChars</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】--16进制编码："</span> <span class="token operator">+</span> reg <span class="token operator">+</span> <span class="token string">" -- "</span> <span class="token operator">+</span> <span class="token string">"合法性校验通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 汉字区间判断，以10进制比较     *     * CJK基本（基本+）：[4E00-9FFF] ---- 10进制区间：[19968-40959]     * CJK扩展A：[3400-4DBF] ---- 10进制区间：[13312-19903]     * CJK兼容：[E000-FAFF] ---- 10进制区间：[57344-64255]     * CJK扩展B：[20000-2A6D6] ---- 10进制区间：[131072-173782]     * CJK扩展C：[2A700-2B734] ---- 10进制区间：[173824-177972]     * CJK扩展D：[2B740-2B81D] ---- 10进制区间：[177984-178205]     * CJK扩展E：[2B820-2CEAF] ---- 10进制区间：[178208-183983]     * CJK扩展F：[2CEB0-2EBE0] ---- 10进制区间：[183984-191456]     * CJK扩展G：[30000-3134A] ---- 10进制区间：[196608-201546]     *     * */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">RangeJudge</span><span class="token punctuation">(</span><span class="token keyword">int</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">13312</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">19903</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">19968</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">40959</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">57344</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">64255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">131072</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">173782</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">173824</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">177972</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">177984</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">178205</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">178208</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">183983</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">183984</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">191456</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg <span class="token operator">>=</span> <span class="token number">196608</span> <span class="token operator">&amp;&amp;</span> reg <span class="token operator">&lt;=</span> <span class="token number">201546</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>验证后如下，当字符串中含有非汉字字符时，即合法性校验不通过：</p><pre class=" language-xml"><code class="language-xml">字符：【𦰡】--10进制：158753CJK扩展B-[131072-173782]字符：【𦰡】--16进制编码：26c21 -- 合法性校验通过--------------------------------------字符：【𬎆】--10进制：181126CJK扩展E-[178208-183983]字符：【𬎆】--16进制编码：2c386 -- 合法性校验通过--------------------------------------字符：【测】--10进制：27979CJK基本（基本+）-[19968-40959]字符：【测】--16进制编码：6d4b -- 合法性校验通过--------------------------------------字符：【试】--10进制：35797CJK基本（基本+）-[19968-40959]字符：【试】--16进制编码：8bd5 -- 合法性校验通过--------------------------------------</code></pre><h3 id="Character-isSupplementaryCodePoint-）"><a href="#Character-isSupplementaryCodePoint-）" class="headerlink" title="Character.isSupplementaryCodePoint(）"></a>Character.isSupplementaryCodePoint(）</h3><h4 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSupplementaryCodePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> codePoint<span class="token punctuation">)</span></code></pre><h4 id="2、参数"><a href="#2、参数" class="headerlink" title="2、参数"></a>2、参数</h4><p>codePoint：进行测试的字符(Unicode代码点)</p><h4 id="3、返回值"><a href="#3、返回值" class="headerlink" title="3、返回值"></a>3、返回值</h4><p>如果指定的代码点是在MIN_SUPPLEMENTARY_CODE_POINT和MAX_CODE_POINT(含)之间此方法返回true，否则返回 false</p>]]></content>
      
      
      
        <tags>
            
            <tag> GB18030 </tag>
            
            <tag> 生僻字 </tag>
            
            <tag> GBK </tag>
            
            <tag> Unicode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j 1.x版本高并发引发BLOCKED死锁</title>
      <link href="/2021/05/13/log4j-1.x-ban-ben-gao-bing-fa-si-suo-wen-ti/"/>
      <url>/2021/05/13/log4j-1.x-ban-ben-gao-bing-fa-si-suo-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="Log4j-1-x版本高并发情况下引发BLOCKED死锁的问题"><a href="#Log4j-1-x版本高并发情况下引发BLOCKED死锁的问题" class="headerlink" title="Log4j 1.x版本高并发情况下引发BLOCKED死锁的问题"></a>Log4j 1.x版本高并发情况下引发BLOCKED死锁的问题</h2><p>应用系统使用Apache log4j-1.2.16版本的jar包，系统在某一天运行过程中服务宕机，通过jstack命令可以发现大量死锁：</p><pre class=" language-java"><code class="language-java"><span class="token string">"http-processor732"</span> #<span class="token number">79018</span> daemon prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x000000001b26c000</span> nid<span class="token operator">=</span><span class="token number">0x2c64</span> waiting <span class="token keyword">for</span> monitor entry <span class="token punctuation">[</span><span class="token number">0x0000000059c3d000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> <span class="token function">BLOCKED</span> <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Category<span class="token punctuation">.</span><span class="token function">callAppenders</span><span class="token punctuation">(</span>Category<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">204</span><span class="token punctuation">)</span>    <span class="token operator">-</span> waiting to lock <span class="token operator">&lt;</span><span class="token number">0x00000007209cfa80</span><span class="token operator">></span> <span class="token punctuation">(</span>a org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBULogger<span class="token punctuation">.</span><span class="token function">callAppendersDirect</span><span class="token punctuation">(</span>CCBULogger<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBULogger<span class="token punctuation">.</span><span class="token function">forcedCCBUTrace</span><span class="token punctuation">(</span>CCBULogger<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">167</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>ServiceabilityManager<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>ServiceabilityManager<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2360</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>ServiceabilityManager<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>ServiceabilityManager<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2461</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>ServiceabilityManager<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>ServiceabilityManager<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2446</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>core<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>SvcMgrUtil<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>SvcMgrUtil<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>server<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1697</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>server<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1002</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>server<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">546</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>HttpServlet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">634</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>HttpServlet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">741</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">231</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>WsFilter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>WsFilter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardWrapperValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardWrapperValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">199</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContextValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardContextValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>AuthenticatorBase<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>AuthenticatorBase<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">494</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardHostValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardHostValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">139</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">.</span>ErrorReportValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>ErrorReportValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardEngineValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardEngineValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>CoyoteAdapter<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>CoyoteAdapter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">343</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span>Http11Processor<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>Http11Processor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">412</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProcessorLight<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProcessorLight<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProtocol$ConnectionHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProtocol<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">754</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NioEndpoint$SocketProcessor<span class="token punctuation">.</span><span class="token function">doRun</span><span class="token punctuation">(</span>NioEndpoint<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1385</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketProcessorBase<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SocketProcessorBase<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x00000007292e6cc0</span><span class="token operator">></span> <span class="token punctuation">(</span>a org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NioEndpoint$NioSocketWrapper<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>TaskThread$WrappingRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TaskThread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span></code></pre><p>查看引发死锁线程如下：</p><pre class=" language-java"><code class="language-java"><span class="token string">"http-processor161"</span> #<span class="token number">78384</span> daemon prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x0000000041dad000</span> nid<span class="token operator">=</span><span class="token number">0x3bf8</span> runnable <span class="token punctuation">[</span><span class="token number">0x000000005cc3c000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>locale<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>LocaleProviderAdapter<span class="token punctuation">.</span><span class="token function">isSupportedLocale</span><span class="token punctuation">(</span>LocaleProviderAdapter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">299</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>LocaleData$LocaleDataResourceBundleControl<span class="token punctuation">.</span><span class="token function">getCandidateLocales</span><span class="token punctuation">(</span>LocaleData<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">218</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundleImpl</span><span class="token punctuation">(</span>ResourceBundle<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1365</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span>ResourceBundle<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">899</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>LocaleData$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>LocaleData<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">167</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>LocaleData$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>LocaleData<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>LocaleData<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span>LocaleData<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>LocaleData<span class="token punctuation">.</span><span class="token function">getDateFormatData</span><span class="token punctuation">(</span>LocaleData<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">127</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormatSymbols<span class="token punctuation">.</span><span class="token function">initializeData</span><span class="token punctuation">(</span>DateFormatSymbols<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">710</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormatSymbols<span class="token punctuation">.</span>&lt;init<span class="token operator">></span><span class="token punctuation">(</span>DateFormatSymbols<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">145</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>util<span class="token punctuation">.</span>locale<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>DateFormatSymbolsProviderImpl<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>DateFormatSymbolsProviderImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">85</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormatSymbols<span class="token punctuation">.</span><span class="token function">getProviderInstance</span><span class="token punctuation">(</span>DateFormatSymbols<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">364</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormatSymbols<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>DateFormatSymbols<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">340</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">.</span><span class="token function">getDisplayName</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2110</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">.</span><span class="token function">subFormat</span><span class="token punctuation">(</span>SimpleDateFormat<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1125</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SimpleDateFormat<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">966</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>SimpleDateFormat<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">936</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>DateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateFormat<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>PatternParser$DatePatternConverter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>PatternParser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">443</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>PatternConverter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>PatternConverter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>PatternLayout<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>PatternLayout<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">506</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBUSyslogAppender<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>CCBUSyslogAppender<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">247</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>AppenderSkeleton<span class="token punctuation">.</span><span class="token function">doAppend</span><span class="token punctuation">(</span>AppenderSkeleton<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">251</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x00000007212a16d8</span><span class="token operator">></span> <span class="token punctuation">(</span>a com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBUSyslogAppender<span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>AppenderAttachableImpl<span class="token punctuation">.</span><span class="token function">appendLoopOnAppenders</span><span class="token punctuation">(</span>AppenderAttachableImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Category<span class="token punctuation">.</span><span class="token function">callAppenders</span><span class="token punctuation">(</span>Category<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">206</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x00000007209cfa80</span><span class="token operator">></span> <span class="token punctuation">(</span>a org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBULogger<span class="token punctuation">.</span><span class="token function">callAppendersDirect</span><span class="token punctuation">(</span>CCBULogger<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">210</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>CCBULogger<span class="token punctuation">.</span><span class="token function">forcedCCBULog</span><span class="token punctuation">(</span>CCBULogger<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">153</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>ServiceabilityManager<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ServiceabilityManager<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2222</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>cisco<span class="token punctuation">.</span>ccbu<span class="token punctuation">.</span>infra<span class="token punctuation">.</span>serviceability<span class="token punctuation">.</span>ServiceabilityManager<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>ServiceabilityManager<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2706</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>server<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">750</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>audium<span class="token punctuation">.</span>server<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>Controller<span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">546</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>HttpServlet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">634</span><span class="token punctuation">)</span>    at javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>HttpServlet<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">741</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">231</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>WsFilter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>WsFilter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">193</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>ApplicationFilterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">166</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardWrapperValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardWrapperValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">199</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardContextValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardContextValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>AuthenticatorBase<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>AuthenticatorBase<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">494</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardHostValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardHostValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">139</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">.</span>ErrorReportValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>ErrorReportValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StandardEngineValve<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>StandardEngineValve<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>CoyoteAdapter<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>CoyoteAdapter<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">343</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span>Http11Processor<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>Http11Processor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">412</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProcessorLight<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProcessorLight<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>AbstractProtocol$ConnectionHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>AbstractProtocol<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">754</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NioEndpoint$SocketProcessor<span class="token punctuation">.</span><span class="token function">doRun</span><span class="token punctuation">(</span>NioEndpoint<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1385</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketProcessorBase<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SocketProcessorBase<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x0000000728e76c80</span><span class="token operator">></span> <span class="token punctuation">(</span>a org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NioEndpoint$NioSocketWrapper<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1149</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">624</span><span class="token punctuation">)</span>    at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span>TaskThread$WrappingRunnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>TaskThread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span></code></pre><p>==at org.apache.log4j.Category.callAppenders(Category.java:206)==</p><p>​    ==locked &lt;0x00000007209cfa80&gt; (a org.apache.log4j.Logger)==</p><p>通过日志可以大致看出问题是出在org.apache.log4j.Category.callAppenders方法中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAppenders</span><span class="token punctuation">(</span>LoggingEvent event<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> writes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Category c <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> c <span class="token operator">!=</span> null<span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span>aai <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          writes <span class="token operator">+=</span> c<span class="token punctuation">.</span>aai<span class="token punctuation">.</span><span class="token function">appendLoopOnAppenders</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span>additive<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>writes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">emitNoAppenderWarning</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>代码中可以看到该方法中使用了synchronized，synchronized是一个重量级锁，它会降低程序性能，被synchronized关键字声明的对象和代码块被视为临界区，当某个线程调用该对象的synchronized方法或者代码块时，便获取了该对象的锁，其他线程若要访问则需要等待，该方法中使用了appendLoopOnAppenders(event)方法：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">appendLoopOnAppenders</span><span class="token punctuation">(</span>LoggingEvent event<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>appenderList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>appenderList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Appender appender <span class="token operator">=</span> <span class="token punctuation">(</span>Appender<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>appenderList<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        appender<span class="token punctuation">.</span><span class="token function">doAppend</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> size<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在该方法中，调用了doAppend(event)方法来追加日志输出，AppenderSkeleton类实现了Appender这个接口：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doAppend</span><span class="token punctuation">(</span>LoggingEvent event<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      LogLog<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Attempted to append to closed appender named ["</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"]."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAsSevereAsThreshold</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Filter f <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>headFilter<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>f <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">decide</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        f <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>doAppend方法上也加了synchronized锁，因此在有线程持有该方法的锁时，其他线程在调用该方法时需等待锁被释放后才能进行日志输出，因此在高并发的情况下很容易产生死锁的情况。</p><p>此时，大致找到死锁产生的原因后，考虑到应用系统属于多年来稳定运行的系统，升级log4j 2.x需要考虑到的因素比较多，临时解决这个问题则需要从日志并发量角度考虑：</p><ol><li><h5 id="尽量输出有效日志，减少无用日志的输出。"><a href="#尽量输出有效日志，减少无用日志的输出。" class="headerlink" title="尽量输出有效日志，减少无用日志的输出。"></a>尽量输出有效日志，减少无用日志的输出。</h5></li><li><h5 id="调整日志输出级别，一般开启info级别，必要情况下再提高日志输出级别。"><a href="#调整日志输出级别，一般开启info级别，必要情况下再提高日志输出级别。" class="headerlink" title="调整日志输出级别，一般开启info级别，必要情况下再提高日志输出级别。"></a>调整日志输出级别，一般开启info级别，必要情况下再提高日志输出级别。</h5></li><li><h5 id="条件允许的情况下升级log4j版本。"><a href="#条件允许的情况下升级log4j版本。" class="headerlink" title="条件允许的情况下升级log4j版本。"></a>条件允许的情况下升级log4j版本。</h5></li></ol><p>在此之前另一个系统碰到类似的log4j导致的性能问题，log4j配置如下：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.primeton.ext.common.logging.AppRollingFileAppender<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLLING_FILE_BS<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--&lt;param name="Threshold" value="INFO"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Encoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>File<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logs/bs.log<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Append<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MaxFileSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MaxBackupIndex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ConversionPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[%d{yyyy-MM-dd HH:mm:ss,SSS}][%p][%C:%L] %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLLING_FILE_BS_SYN<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.log4j.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BufferSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8192<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LocationInfo<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLLING_FILE_BS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><param name="LocationInfo" value="true"><p>该配置作用是输出java文件名称和行号，默认为false。</p><p>在jar包中定位LocationInfo类的代码如下：</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token function">LocationInfo</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">,</span> String fqnOfCallingClass<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>fqnOfCallingClass <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>getLineNumberMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> noArgs <span class="token operator">=</span> null<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>getStackTraceMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> noArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>        String prevClass <span class="token operator">=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> elements<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          String thisClass <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>getClassNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> noArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>fqnOfCallingClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>thisClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> caller <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>caller <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> prevClass<span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>methodName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>getMethodNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">,</span> noArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>getFileNameMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">,</span> noArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>fileName <span class="token operator">=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">int</span> line <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>getLineNumberMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>elements<span class="token punctuation">[</span>caller<span class="token punctuation">]</span><span class="token punctuation">,</span> noArgs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lineNumber <span class="token operator">=</span> <span class="token string">"?"</span><span class="token punctuation">;</span>              <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>lineNumber <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              StringBuffer buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lineNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>              buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>fullInfo <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          prevClass <span class="token operator">=</span> thisClass<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LogLog<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LocationInfo failed using JDK 1.4 methods"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">InterruptedIOException</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LogLog<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LocationInfo failed using JDK 1.4 methods"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LogLog<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"LocationInfo failed using JDK 1.4 methods"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    String s<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sw<span class="token punctuation">)</span> <span class="token punctuation">{</span>      t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span>      s <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sw<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ibegin <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>fqnOfCallingClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ibegin <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ibegin <span class="token operator">+</span> fqnOfCallingClass<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ibegin <span class="token operator">+</span> fqnOfCallingClass<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>fqnOfCallingClass <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ibegin <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ibegin <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Layout<span class="token punctuation">.</span>LINE_SEP<span class="token punctuation">,</span> ibegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ibegin <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    ibegin <span class="token operator">+=</span> Layout<span class="token punctuation">.</span>LINE_SEP_LEN<span class="token punctuation">;</span>    <span class="token keyword">int</span> iend <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>Layout<span class="token punctuation">.</span>LINE_SEP<span class="token punctuation">,</span> ibegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iend <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVisualAge<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      ibegin <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"at "</span><span class="token punctuation">,</span> iend<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ibegin <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ibegin <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fullInfo <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ibegin<span class="token punctuation">,</span> iend<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>可以看到有一块代码也加了synchronized锁，再通过打印堆栈来获取行号信息，因此评估该方法在高并发的情况下也会造成性能问题</p><pre class=" language-java"><code class="language-java">String s<span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sw<span class="token punctuation">)</span> <span class="token punctuation">{</span>  t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span>  s <span class="token operator">=</span> sw<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sw<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因此在ConversionPattern配置中将%L去掉，先后测试的数据如下：</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture1.png" alt></p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/picture2.png" alt></p><p>测试相对比较简单，数据不具有绝对的参考性，但可以大致看出locationinfo的参数配置在一定情况下也会带来性能问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> log4j </tag>
            
            <tag> 高并发 </tag>
            
            <tag> 死锁 </tag>
            
            <tag> BLOCKED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Left join未使用索引</title>
      <link href="/2021/05/13/left-join-wei-shi-yong-suo-yin/"/>
      <url>/2021/05/13/left-join-wei-shi-yong-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql字符集不同导致索引失效"><a href="#Mysql字符集不同导致索引失效" class="headerlink" title="Mysql字符集不同导致索引失效"></a>Mysql字符集不同导致索引失效</h2><p>先上SQL语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">a</span><span class="token punctuation">.</span>fuhrq <span class="token keyword">AS</span> fuhrq    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>busiType <span class="token keyword">AS</span> busiType    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>zhangh <span class="token keyword">AS</span> zhangh    <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>DOCUMENT_NUMBER <span class="token keyword">AS</span> createNumber    <span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>HUM <span class="token keyword">AS</span> hum    <span class="token punctuation">,</span><span class="token number">c</span><span class="token punctuation">.</span>ORGANNAME <span class="token keyword">AS</span> organname    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>yinjkbh <span class="token keyword">AS</span> yinjkbh    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>channelId <span class="token keyword">AS</span> channelId    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>localSerialNum <span class="token keyword">AS</span> localSerialNum    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>warehousingStatus <span class="token keyword">AS</span> warehousingStatus    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>qiyrq <span class="token keyword">AS</span> qiyrq    <span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span>ruky <span class="token keyword">AS</span> ruky<span class="token keyword">FROM</span> yinj_serial_status <span class="token number">a</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> zhanghb <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>zhangh <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>zhangh<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> organarchives <span class="token number">c</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>JIGH <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>ORGANNUM<span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>serialStatus <span class="token operator">=</span> <span class="token string">'6'</span>    <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>fuhrq <span class="token operator">>=</span> <span class="token string">'2020-10-01'</span>    <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>fuhrq <span class="token operator">&lt;=</span> <span class="token string">'2020-12-16'</span>    <span class="token operator">AND</span> <span class="token number">a</span><span class="token punctuation">.</span>jigh <span class="token operator">IN</span> <span class="token punctuation">(</span>        <span class="token keyword">SELECT</span> o<span class="token punctuation">.</span>ORGANNUM        <span class="token keyword">FROM</span> organarchives o        <span class="token keyword">WHERE</span> LEVELFLAG <span class="token operator">LIKE</span> <span class="token string">'6iv%'</span>        <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>fuhrq <span class="token keyword">DESC</span><span class="token punctuation">;</span></code></pre><p>其中a表（8000+条记录）中索引信息如下：</p><table><thead><tr><th align="left">名</th><th>字段</th><th>索引类型</th><th>索引方法</th></tr></thead><tbody><tr><td align="left">localSerialNum</td><td>localSerialNum</td><td>Unique</td><td>BTREE</td></tr><tr><td align="left">idx_zhangh</td><td>idx_zhangh</td><td>Normal</td><td>BTREE</td></tr><tr><td align="left">idx_fuhrq</td><td>idx_fuhrq</td><td>Normal</td><td>BTREE</td></tr></tbody></table><p>b表（30W+条记录）索引如下</p><table><thead><tr><th align="left">名</th><th>字段</th><th>索引类型</th><th>索引方法</th></tr></thead><tbody><tr><td align="left">idx_document_number</td><td>DOCUMENT_NUMBER</td><td>Normal</td><td>BTREE</td></tr><tr><td align="left">idx_zhangh</td><td>ZHANGH</td><td>Normal</td><td>BTREE</td></tr></tbody></table><p>c表（400+条记录）索引如下</p><table><thead><tr><th align="left">名</th><th>字段</th><th>索引类型</th><th>索引方法</th></tr></thead><tbody><tr><td align="left">ORGANARCHIVES_N_PARENTNUM</td><td>N_PARENTNUM</td><td>Normal</td><td>BTREE</td></tr><tr><td align="left">idx_levelflag</td><td>idx_levelflag</td><td>Normal</td><td>BTREE</td></tr></tbody></table><p>该SQL跑了190S依然没有将结果查询出来，查看了一下该SQL的执行计划没有使用a表的idx_zhangh索引查询，而是全表扫描：</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/SqlPlan1.png" alt></p><p>看了一下SHOW WARNINGS</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--WARNING! ERRORS ENCOUNTERED DURING SQL PARSING!</span><span class="token comment" spellcheck="true">/* select#1 */</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>busiType<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>busiType<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>DOCUMENT_NUMBER<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>createNumber<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>HUM<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>hum<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNAME<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>organname<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>yinjkbh<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>yinjkbh<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>channelId<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>channelId<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>localSerialNum<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>localSerialNum<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>warehousingStatus<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>warehousingStatus<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>qiyrq<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>qiyrq<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ruky<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>ruky<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>yinj_serial_status<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span> semi<span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>organarchives<span class="token punctuation">`</span> <span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhanghb<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ZHANGH<span class="token punctuation">`</span> <span class="token keyword">using</span> utf8mb4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>organarchives<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>jigh<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNUM<span class="token punctuation">`</span> <span class="token keyword">using</span> utf8mb4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>serialStatus<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'6'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token operator">>=</span> <span class="token string">'2020-10-01'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token operator">&lt;=</span> <span class="token string">'2020-12-16'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>LEVELFLAG<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'6iv%'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>jigh<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token keyword">convert</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNUM<span class="token punctuation">`</span> <span class="token keyword">using</span> utf8mb4<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token keyword">DESC</span></code></pre><p>可以看到在LEFT JOIN的ON关联条件中做了convert(<code>localhost</code>.<code>b</code>.<code>ZHANGH</code> using utf8mb4)、convert(<code>localhost</code>.<code>c</code>.<code>ORGANNUM</code> using utf8mb4)、convert(<code>localhost</code>.<code>c</code>.<code>ORGANNUM</code> using utf8mb4)分别对zhanghao、organnum做了字符集的转换，导致不适用表上的索引，而是全表扫描。</p><p>看了一下几张表的字符集，发现yinj_serial_status表字段的字符集为utf8mb4、utf8mb4_general_ci，另外两张表为utf8、utf8_general_ci，当yinj_serial_status表作为驱动表时，需要将被驱动表的字符集转为utf8mb4</p><pre><code>SHOW FULL COLUMNS FROM yinj_serial_status;SHOW FULL COLUMNS FROM zhanghb;SHOW FULL COLUMNS FROM organarchives;</code></pre><p>yinj_serial_status表</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/yinj_serial_status.png" alt></p><p>zhanghb表</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/zhanghb.png" alt></p><p>organarchives表</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/organarchives.png" alt></p><p>修改了一下yinj_serial_status表的字符集</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> yinj_serial_status <span class="token keyword">CONVERT</span> <span class="token keyword">TO</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span></code></pre><p>再看一下该SQL的执行计划走了相应的索引，而idx_fuhrq因为时间范围覆盖了全表，走全表扫描也是正常。</p><p><img src="https://joshphe-pics.oss-cn-shanghai.aliyuncs.com/pics/SqlPlan2.png" alt></p><p>整条SQL执行完成只需0.5s，再看一下SHOW WARNINGS没有再进行字符集的转换</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* select#1 */</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>busiType<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>busiType<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>DOCUMENT_NUMBER<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>createNumber<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>HUM<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>hum<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNAME<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>organname<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>yinjkbh<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>yinjkbh<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>channelId<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>channelId<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>localSerialNum<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>localSerialNum<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>warehousingStatus<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>warehousingStatus<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>qiyrq<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>qiyrq<span class="token punctuation">`</span>    <span class="token punctuation">,</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ruky<span class="token punctuation">`</span> <span class="token keyword">AS</span> <span class="token punctuation">`</span>ruky<span class="token punctuation">`</span><span class="token keyword">FROM</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>organarchives<span class="token punctuation">`</span> <span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token keyword">JOIN</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>yinj_serial_status<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhanghb<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">b</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ZHANGH<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>zhangh<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>organarchives<span class="token punctuation">`</span> <span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span> <span class="token keyword">ON</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>jigh<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">c</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNUM<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> <span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>serialStatus<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'6'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token operator">>=</span> <span class="token string">'2020-10-01'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token operator">&lt;=</span> <span class="token string">'2020-12-16'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>LEVELFLAG<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'6iv%'</span><span class="token punctuation">)</span>        <span class="token operator">AND</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>jigh<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>o<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>ORGANNUM<span class="token punctuation">`</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span>localhost<span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token number">a</span><span class="token punctuation">`</span><span class="token punctuation">.</span><span class="token punctuation">`</span>fuhrq<span class="token punctuation">`</span> <span class="token keyword">DESC</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> left join </tag>
            
            <tag> 索引 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 字符集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库设计开发规范</title>
      <link href="/2021/01/22/mysql-shu-ju-ku-she-ji-kai-fa-gui-fan-v1.0/"/>
      <url>/2021/01/22/mysql-shu-ju-ku-she-ji-kai-fa-gui-fan-v1.0/</url>
      
        <content type="html"><![CDATA[<h3 id="Mysql-数据库设计约束："><a href="#Mysql-数据库设计约束：" class="headerlink" title="Mysql 数据库设计约束："></a>Mysql 数据库设计约束：</h3><h4 id="一、建表约束"><a href="#一、建表约束" class="headerlink" title="一、建表约束"></a>一、建表约束</h4><p>【强制】 日期、时间相关的字段，根据精度要求不同，使用date或timestamp类型，不要使用char或varchar类型，如果字段只包含日期不包含具体时间，使用date型，把时分秒设置为00:00:00</p><p><strong>解读：</strong>使用char或varchar类型可能造成优化器估算不准，影响数据处理效率。</p><p>【强制】 应用用户没有授予管理员权限</p><p><strong>解读：</strong>严格的权限管理能有效避免不必要的操作失误。</p><p>【强制】建表时需要对表和字段增加注释</p><p><strong>解读：</strong>规范的建表和注释便于后续维护和管理。</p><p>【强制】所有数据库对象名称禁止使用mysql保留关键字</p><p><strong>解读：</strong>使用Mysql保留关键字会导致SQL报错。</p><p>【建议】高并发OLTP交易系统尽量避免使用大字段（BLOB、CLOB、LONG）</p><p><strong>解读：</strong>因LOB字段结构特点，高并发系统中LOB字段时长出现导致系统运行缓慢的问题。被删除或更新的BLOB字段所占用空间不会自动批量回收，若表存在大量删除、更新操作时，BLOB所在Segments会迅速耗尽空间，新的INSERT需要空间时，会在高水位线上加锁后，回收曾使用但已经过期的BLOB空间，因该操作效率很低，数据库会有大量的‘enq:HW - contention’等待，相关SQL会由于该等待而串行执行，业务受影响十分严重。</p><p>【建议】建议控制单表数据量在1000万以内。单表数据文件控制在10G。单行数据建议不超过8K</p><p><strong>解读：</strong>表记录数过多对数据库性能会有影响，若单行记录仅仅超出一点，还会产生较大的空间浪费。</p><p>【建议】不建议使用Mysql分区表</p><p><strong>解读：</strong>Mysql分区表在物理上表现为多个文件，在逻辑上表现为一张表，谨慎选择分区键，跨分区查询效率可能会更低，建议采用物理分表的方式管理大数据。</p><p>【建议】不建议在数据库中存储图片，文件等大的二进制数据</p><p><strong>解读：</strong>通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，会进行大量的随机IO操作，文件很大时，IO操作很耗时。这类二进制数据建议存储于文件服务器，数据库只存储文件地址信息。</p><hr><h4 id="二、SQL约束"><a href="#二、SQL约束" class="headerlink" title="二、SQL约束"></a>二、SQL约束</h4><p>【强制】where条件里的过滤字段上禁止使用函数</p><p><strong>解读：</strong>在sql的where子句中带有索引的列使用函数时，优化器会忽略掉索引导致索引失效。建议将函数应用在条件上，索引是可以生效的。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staff <span class="token keyword">where</span> trunc<span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'01-MAY-82'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不会用到索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staff <span class="token keyword">where</span> birthdate <span class="token operator">&lt;</span> <span class="token punctuation">(</span>to_date<span class="token punctuation">(</span><span class="token string">'01-MAY-82'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//会使用索引</span></code></pre><p>【强制】禁止使用LIKE ‘%_’进行模糊匹配查询</p><p><strong>解读：</strong>对字段使用like模糊匹配时，如果不从字段的第一位开始，将无法使用索引，禁止使用。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'aaa%'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'aaa%' 会用到索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%aaa'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'%aaa' 或者 '_aaa' 不会使用索引</span></code></pre><p>【强制】绑定变量和字段数据类型需要保持一致</p><p><strong>解读：</strong>字段定义和SQL绑定变量传进来的值的类型需要保持一致，否则会导致隐式转换无法使用索引。</p><pre class=" language-sql"><code class="language-sql">例如：dept_id 是一个varchar2型的字段，但在查询时把该字段作为number类型以<span class="token keyword">where</span>条件传给Oracle<span class="token punctuation">,</span>这样会导致索引失效。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">33333333333</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误的例子</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> dept_id <span class="token operator">=</span><span class="token string">'33333333333'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正确的例子</span></code></pre><p>【强制】在查询中指定所需的列，不要直接使用 ‘*’ 返回所有的列</p><p><strong>解读：</strong></p><p>（1）在查询中使用select * 时，需要多做一步查询内部系统目录以便把表中的所有字段名找出来。</p><p>（2）明确字段名，将来在表增加字段的时候，不会导致程序报错。</p><p>（3）读取不需要的列会增加CPU、IO、NET消耗。</p><p>（4）无法有效的利用覆盖索引。</p><p>【强制】变量和参数在类型和长度必须与表定义的列类型和长度匹配</p><p><strong>解读：</strong>减少存储空间和IO资源的浪费，避免隐式转换而导致不使用索引的情况。</p><p>【强制】SQL语句中的表关联查询不允许超过5个，需要join的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引</p><p><strong>解读：</strong>优化器对与多表连接查询的处理效果不佳，应尽可能减少多表连接的情况，关联字段需要有索引避免不必要的全表扫描，提高执行效率。</p><p>【强制】对于很大的表进行全表删除时，不允许使用全表delete，应用truncate或drop重建</p><p><strong>解读：</strong>delete语句是dml，该操作会放到rollback segment中，事务提交后才生效；delete语句不影响表所占用的extent，高水线（high watermark）保持原位置不动；而truncate会将高水线复位（回到最开始）。</p><p>另外删除速度一般来说：drop &gt; truncate &gt; delete</p><p>【强制】大批量UPDATE、DELETE、INSERT操作，要分批多次操作</p><p><strong>解读：</strong>大批量操作可能会造成严重的主从延迟，binlog日志为row格式时会产生大量的日志，应避免产生大事务操作。</p><p>【强制】禁止使用order by rand() 进行随机排序</p><p><strong>解读：</strong>将rand()放在order by子句中会被多次执行，效率极低，禁止使用。</p><p>【强制】受制于GTID复制的限制，不使用create table …… select语句建立表、不可以在事务中使用create temporary table建立临时表、不可使用关联更新，同时更新事务表与非事务表。</p><p><strong>解读：</strong>受制于GTID复制的限制。</p><p>【建议】对应同一列进行or判断时，使用in代替or</p><p><strong>解读：</strong>in或or在字段有添加索引的情况下，查询速度近似，但在没有添加索引的情况下，连接的字段越多，in比or的效率高很多。</p><p>【建议】尽量避免使用全表扫描</p><p><strong>解读：</strong>对于小表或代码表的访问，全表扫描也许是合理的，其他情况下应尽量避免全表扫描，提高执行效率。</p><p>【建议】明显不会有重复值时使用UNION ALL而不是UNION</p><p><strong>解读：</strong>union：对两个结果集进行并集操作，不包括重复行，同时进行默认规则的排序；union all：对两个结果集进行并集操作，包括重复行，不进行排序。所以在已知不会有重复值的情况下使用union all效率要高很多，因为union需要进行排重。</p><hr><h4 id="三、索引约束"><a href="#三、索引约束" class="headerlink" title="三、索引约束"></a>三、索引约束</h4><p>【强制】 Mysql每个InnoDB表必须要有主键，推荐使用自增列作为主键</p><p><strong>解读：</strong>递增主键在写入时可以提高插入性能，避免Page分裂，减少表碎片，提升内存和空间的使用。InnoDB默认会给没有主键的表创建一个不可见的、长度为6字节的row_id，且InnoDB维护了一个全局的dictsys.row_id，所有未定义主键的表都共用这个row_id。无主键的表删除时，使用row模式的主从架构会导致备份表夯住。</p><p>【强制】 分区表上如无特别原因不使用全局索引</p><p><strong>解读：</strong>分区表使用global index或local index因根据实际的业务需要来设计，应尽量将业务需要统计的信息放在同一个分区中，使用local index使分区表的性能最大化。若需要使用global index，需说明原因，对分区进行维护后全局索引会失效，应特别注意。</p><p>【强制】 OLTP系统每张表索引不超过5个</p><p><strong>解读：</strong>控制索引数量可以减少不必要的索引空间维护和使用，对于经常插入、更新、删除数据的表应减少索引数量，过多的索引会导致索引开销大，影响性能。</p><p>【强制】 复合索引字段不超过3个，必须将区分度更高的字段放在左边</p><p><strong>解读：</strong>复合索引的设计应综合考虑前缀性和可选性，索引字段不宜过多，应尽可能将区分度高，查询使用较频繁的字段放在左边，这样能够一开始就有效的过滤掉无用数据。在写SQL时，若WHERE条件中包含多个条件，应看表上是否有线程的联合索引可使用，注意各个条件的顺序应尽量和复合索引字段顺序一致。</p><p>【强制】 没有重复索引（如a和a,b列都建了索引）</p><p><strong>解读：</strong>避免在表上建立重复的索引如复合索引(a,b)和单列索引a，降低索引的维护成本。</p><p>【强制】 外键的子表关联字段上必须有索引</p><p><strong>解读：</strong>如果使用了外键约束，子表的关联字段上必须创建索引，否则主表的每一条记录删除，都会导致对子表一次全表扫描。</p><p>【强制】 避免在更新频繁、区分度不高的列上单独建立索引</p><p><strong>解读：</strong>区分度不高的列单独创建索引的优化效果很小，但是较为频繁的更新则会让索引的维护成本更高。</p><hr><h4 id="四、存储过程约束"><a href="#四、存储过程约束" class="headerlink" title="四、存储过程约束"></a>四、存储过程约束</h4><p>【强制】禁止使用存储过程</p><p><strong>解读：</strong>MySQL数据库在使用存储过程中会有一些限制，如优化器无法使用关键字来优化单个查询调用存储过程、优化器无法评估存储过程函数的执行成本等。而使用存储过程处理复杂业务逻辑时，在性能上没有太大提升，并且处理简单逻辑的语句时，是否使用存储过程性能差别并不大，同时对于存储过程的管理也相对复杂，所以不允许使用存储过程。</p><hr><h4 id="五、触发器约束"><a href="#五、触发器约束" class="headerlink" title="五、触发器约束"></a>五、触发器约束</h4><p>【强制】禁止使用触发器</p><p><strong>解读：</strong>考虑到降低数据库的复杂度，提高可维护性，减少不可预知的风险，禁止使用触发器。</p><hr><h4 id="六、视图约束"><a href="#六、视图约束" class="headerlink" title="六、视图约束"></a>六、视图约束</h4><hr><h4 id="七、统计信息"><a href="#七、统计信息" class="headerlink" title="七、统计信息"></a>七、统计信息</h4><p>Mysql有自动统计信息收集机制，当表的修改超过10%时触发。统计信息收集为异步模式，因此对短时间内有大量数据变化的表，需要手工收集统计信息。</p><hr><h4 id="八、系统级别约束"><a href="#八、系统级别约束" class="headerlink" title="八、系统级别约束"></a>八、系统级别约束</h4><p>【强制】在Mysql5.5版本后，Innodb成为默认存储引擎，所有表必须使用该存储引擎</p><p><strong>解读：</strong>Innodb存储引擎支持ACID事务、支持行级锁、具备更好的恢复性以及更好的并发性。</p><p>【强制】MySQL数据库支持多种字符集，如无特殊要求，使用utf8mb4</p><p><strong>解读：</strong>MySQL数据库支持多种字符集，如无特殊要求，使用utf8mb4，注意日常操作导出建表语句的操作中字符集的设置，不同的字符集可能引起索引失效等问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库日常操作</title>
      <link href="/2021/01/22/oracle-shu-ju-ku-ri-chang-cao-zuo-ji-lu/"/>
      <url>/2021/01/22/oracle-shu-ju-ku-ri-chang-cao-zuo-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>Oracle数据库日常操作</p><a id="more"></a><h2 id="Oracle数据库日常操作"><a href="#Oracle数据库日常操作" class="headerlink" title="Oracle数据库日常操作"></a>Oracle数据库日常操作</h2><h5 id="一、查询数据库表的字段、类型、长度、是否为空"><a href="#一、查询数据库表的字段、类型、长度、是否为空" class="headerlink" title="一、查询数据库表的字段、类型、长度、是否为空"></a>一、查询数据库表的字段、类型、长度、是否为空</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>       <span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME <span class="token keyword">as</span> TableName<span class="token punctuation">,</span>       <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> user_views v <span class="token keyword">where</span> v<span class="token punctuation">.</span>VIEW_NAME <span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME <span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span> <span class="token string">'V'</span> <span class="token keyword">else</span> <span class="token string">'U'</span><span class="token keyword">end</span> <span class="token keyword">as</span> <span class="token string">"TableType"</span><span class="token punctuation">,</span>       <span class="token number">a</span><span class="token punctuation">.</span>COLUMN_NAME <span class="token keyword">as</span> ColumnName<span class="token punctuation">,</span>       A<span class="token punctuation">.</span>COLUMN_ID <span class="token keyword">as</span> ColumnIndex<span class="token punctuation">,</span>       <span class="token number">a</span><span class="token punctuation">.</span>DATA_TYPE <span class="token keyword">as</span> DataType<span class="token punctuation">,</span>       <span class="token keyword">case</span>           <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>DATA_TYPE <span class="token operator">=</span> <span class="token string">'NUMBER'</span> <span class="token keyword">then</span>           <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>Data_Precision <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token keyword">then</span>             <span class="token number">a</span><span class="token punctuation">.</span>Data_Length             <span class="token keyword">else</span>                <span class="token number">a</span><span class="token punctuation">.</span>Data_Precision               <span class="token keyword">end</span>          <span class="token keyword">else</span>          <span class="token number">a</span><span class="token punctuation">.</span>Data_Length       <span class="token keyword">end</span> <span class="token keyword">as</span> Length<span class="token punctuation">,</span>       <span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span><span class="token punctuation">.</span>nullable <span class="token operator">=</span> <span class="token string">'N'</span> <span class="token keyword">then</span>  <span class="token string">'0'</span> <span class="token keyword">else</span> <span class="token string">'1'</span> <span class="token keyword">end</span> <span class="token keyword">as</span> IsNullable<span class="token punctuation">,</span>       <span class="token number">b</span><span class="token punctuation">.</span>comments <span class="token keyword">as</span> <span class="token string">"Description"</span><span class="token punctuation">,</span>        <span class="token keyword">case</span>          <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> user_cons_columns <span class="token number">c</span>             <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>table_name<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>column_name<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">and</span> <span class="token number">c</span><span class="token punctuation">.</span>constraint_name<span class="token operator">=</span>                <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>constraint_name <span class="token keyword">from</span> user_constraints <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">d</span><span class="token punctuation">.</span>table_name<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>table_name <span class="token operator">and</span> <span class="token number">d</span><span class="token punctuation">.</span>constraint_type   <span class="token operator">=</span><span class="token string">'P'</span><span class="token punctuation">)</span>                 <span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token keyword">then</span> <span class="token string">'1'</span> <span class="token keyword">else</span> <span class="token string">'0'</span><span class="token keyword">end</span> <span class="token keyword">as</span> IsPK  <span class="token keyword">from</span> USER_TAB_COLS <span class="token number">a</span><span class="token punctuation">,</span>       sys<span class="token punctuation">.</span>user_col_comments <span class="token number">b</span> <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>table_name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>table_name             <span class="token operator">and</span> <span class="token number">b</span><span class="token punctuation">.</span>COLUMN_NAME <span class="token operator">=</span> <span class="token number">a</span><span class="token punctuation">.</span>COLUMN_NAME              <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span> <span class="token number">a</span><span class="token punctuation">.</span>COLUMN_ID<span class="token punctuation">;</span></code></pre><h5 id="二、查询表的约束"><a href="#二、查询表的约束" class="headerlink" title="二、查询表的约束"></a>二、查询表的约束</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_NAME<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_TYPE<span class="token punctuation">,</span>    wm_concat <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">.</span>COLUMN_NAME<span class="token punctuation">)</span> <span class="token keyword">as</span> CONSTRAINT_COLUMNS<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>R_CONSTRAINT_NAME<span class="token keyword">from</span>    USER_CONSTRAINTS <span class="token number">a</span>    <span class="token keyword">left</span> <span class="token keyword">join</span> USER_CONS_COLUMNS <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_NAME <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>CONSTRAINT_NAME<span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_NAME<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_TYPE<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>R_CONSTRAINT_NAME<span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token number">a</span><span class="token punctuation">.</span>TABLE_NAME<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>CONSTRAINT_NAME<span class="token punctuation">;</span></code></pre><h5 id="三、查询表的索引"><a href="#三、查询表的索引" class="headerlink" title="三、查询表的索引"></a>三、查询表的索引</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>table_name<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>index_name<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>index_type<span class="token punctuation">,</span>    <span class="token number">b</span><span class="token punctuation">.</span>column_name<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>uniqueness <span class="token keyword">as</span> isuniqueness<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>partitioned <span class="token keyword">as</span> ispartition<span class="token punctuation">,</span>    <span class="token number">a</span><span class="token punctuation">.</span>tablespace_name<span class="token keyword">from</span>    user_indexes <span class="token number">a</span><span class="token punctuation">,</span>    user_ind_columns <span class="token number">b</span><span class="token keyword">where</span>    <span class="token number">a</span><span class="token punctuation">.</span>index_name <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>index_name<span class="token keyword">order</span> <span class="token keyword">by</span>    table_name<span class="token punctuation">,</span>    index_name<span class="token punctuation">;</span></code></pre><h5 id="四、查询表分区情况"><a href="#四、查询表分区情况" class="headerlink" title="四、查询表分区情况"></a>四、查询表分区情况</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    table_name<span class="token punctuation">,</span>    partitioned <span class="token keyword">as</span> ispartitioned<span class="token punctuation">,</span>    <span class="token string">'非分区'</span> <span class="token keyword">as</span> partitioning_type<span class="token keyword">from</span>    user_tables<span class="token keyword">where</span>    table_name <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span>        <span class="token keyword">select</span>            table_name <span class="token keyword">from</span> user_part_tables<span class="token punctuation">)</span><span class="token keyword">union</span><span class="token keyword">select</span>    t<span class="token punctuation">.</span>table_name<span class="token punctuation">,</span>    t<span class="token punctuation">.</span>partitioned <span class="token keyword">as</span> ispartitioned<span class="token punctuation">,</span>    p<span class="token punctuation">.</span>partitioning_type<span class="token keyword">from</span>    user_tables t<span class="token punctuation">,</span>    user_part_tables p<span class="token keyword">where</span>    t<span class="token punctuation">.</span>table_name <span class="token operator">=</span> p<span class="token punctuation">.</span>table_name<span class="token punctuation">;</span></code></pre><h5 id="五、查询全表扫描的语句"><a href="#五、查询全表扫描的语句" class="headerlink" title="五、查询全表扫描的语句"></a>五、查询全表扫描的语句</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--查找SQL_ID</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> v$sql_plan v<span class="token keyword">WHERE</span> v<span class="token punctuation">.</span>OPERATION <span class="token operator">=</span> <span class="token string">'TABLE ACCESS'</span>    <span class="token operator">AND</span> v<span class="token punctuation">.</span>OPTIONS <span class="token operator">=</span> <span class="token string">'FULL'</span>    <span class="token operator">AND</span> v<span class="token punctuation">.</span>OBJECT_OWNER <span class="token operator">=</span> <span class="token string">'XXX'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--查询指定用户</span><span class="token comment" spellcheck="true">--根据SQL_ID查找SQL_TEXT</span><span class="token keyword">SELECT</span> p<span class="token punctuation">.</span>SQL_TEXT    <span class="token punctuation">,</span>p<span class="token punctuation">.</span>SQL_ID    <span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token keyword">TIMESTAMP</span><span class="token keyword">FROM</span> v$sqlarea p    <span class="token punctuation">,</span>v$sql_plan q<span class="token keyword">WHERE</span> p<span class="token punctuation">.</span>SQL_ID <span class="token operator">=</span> q<span class="token punctuation">.</span>SQL_ID    <span class="token operator">AND</span> q<span class="token punctuation">.</span>OPERATION <span class="token operator">=</span> <span class="token string">'TABLE ACCESS'</span>    <span class="token operator">AND</span> q<span class="token punctuation">.</span>OPTIONS <span class="token operator">=</span> <span class="token string">'FULL'</span>    <span class="token operator">AND</span> q<span class="token punctuation">.</span>OBJECT_OWNER <span class="token operator">=</span> <span class="token string">'XXX'</span><span class="token comment" spellcheck="true">--查询指定用户</span>    <span class="token operator">AND</span> q<span class="token punctuation">.</span><span class="token keyword">TIMESTAMP</span> <span class="token operator">></span> sysdate <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><h5 id="五、查询全表扫描的语句-1"><a href="#五、查询全表扫描的语句-1" class="headerlink" title="五、查询全表扫描的语句"></a>五、查询全表扫描的语句</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--表统计信息收集</span><span class="token keyword">begin</span>    dbms_stats<span class="token punctuation">.</span>gather_table_stats<span class="token punctuation">(</span><span class="token string">'USER'</span><span class="token punctuation">,</span><span class="token string">'TABLE_NAME'</span><span class="token punctuation">,</span><span class="token keyword">cascade</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token operator">/</span></code></pre><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库设计开发规范</title>
      <link href="/2021/01/22/oracle-shu-ju-ku-she-ji-kai-fa-gui-fan-v1.0/"/>
      <url>/2021/01/22/oracle-shu-ju-ku-she-ji-kai-fa-gui-fan-v1.0/</url>
      
        <content type="html"><![CDATA[<h3 id="Oracle-数据库设计约束："><a href="#Oracle-数据库设计约束：" class="headerlink" title="Oracle 数据库设计约束："></a>Oracle 数据库设计约束：</h3><h4 id="一、建表约束"><a href="#一、建表约束" class="headerlink" title="一、建表约束"></a>一、建表约束</h4><p>【强制】对于流水表，若记录数超过1000W行以上，应使用分区表（parition）</p><p><strong>解读：</strong>大表使用分区表可以有效提高查询性能，便于数据清理。若其他大表有性能需要，也可以使用分区技术。</p><p>【强制】 表记录长度不能超过1个 block/page</p><p><strong>解读：</strong>表记录超长对数据库性能会有影响，若单条记录仅仅超出一点，还会产生较大的空间浪费。</p><p>【强制】 大型数据库，应该为应用建立专门的表空间，数据与索引表空间分开，流水表与历史表应设立专用表空间</p><p><strong>解读：</strong>针对大型数据库，交易表、流水表、历史表应开辟专用的表空间。在数据迁移、备份恢复过程中以表空间为单位，具备以下优点：</p><p>1）便于数据迁移；</p><p>2）便于构造小的测试环境；</p><p>3）便于构造小的容灾环境。</p><p>大表建议拆分为交易表、历史表，结合多表空间存放，可有效降低触发全表扫描时的性能问题，提高交易性能；降低数据清理对交易的影响。</p><p>【强制】 应用用户没有授予管理员权限</p><p><strong>解读：</strong>严格的权限管理能有效避免不必要的操作失误。</p><p>【强制】 生产环境建表或表插入时，禁止使用 nologging 选项</p><p><strong>解读：</strong>该操作会导致数据库恢复时出现坏块，导致表无法使用。</p><p>【强制】 对分区表进行维护后，需要重建全局索引</p><p><strong>解读：</strong>对分区进行维护后全局索引会失效。</p><p>【强制】建表时需要用 comment 语句对表和字段增加注释</p><p><strong>解读：</strong>规范的建表和注释便于后续维护和管理。</p><p>【强制】sequence 应该设置 cache 为1000以上，并设置为 noorder</p><p><strong>解读：</strong>针对高并发系统，若对 Sequence 没有严格的序号要求，应设置 cache 为1000以上，缺省的序列 Cache 值为20，无法满足高并发要求。</p><p>【建议】高并发 OLTP 交易系统尽量避免使用大字段（BLOB、CLOB、LONG）</p><p><strong>解读：</strong>因 LOB 字段结构特点，高并发系统中 LOB 字段时长出现导致系统运行缓慢的问题。被删除或更新的BLOB字段所占用空间不会自动批量回收，若表存在大量删除、更新操作时，BLOB 所在 Segments 会迅速耗尽空间，新的INSERT需要空间时，会在高水位线上加锁后，回收曾使用但已经过期的BLOB空间，因该操作效率很低，数据库会有大量的 ‘enq:HW - contention’ 等待，相关 SQL 会由于该等待而串行执行，业务受影响十分严重。</p><hr><h4 id="二、SQL约束"><a href="#二、SQL约束" class="headerlink" title="二、SQL约束"></a>二、SQL约束</h4><p>【强制】where 条件里的过滤字段上禁止使用函数</p><p><strong>解读：</strong>在 sql 的 where 子句中带有索引的列使用函数时，优化器会忽略掉索引导致索引失效。建议将函数应用在条件上，索引是可以生效的。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staff <span class="token keyword">where</span> trunc<span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'01-MAY-82'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不会用到索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> staff <span class="token keyword">where</span> birthdate <span class="token operator">&lt;</span> <span class="token punctuation">(</span>to_date<span class="token punctuation">(</span><span class="token string">'01-MAY-82'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//会使用索引</span></code></pre><p>【强制】禁止使用 LIKE ‘%_’进行模糊匹配查询</p><p><strong>解读：</strong>对字段使用like模糊匹配时，如果不从字段的第一位开始，将无法使用索引，禁止使用。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'aaa%'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'aaa%' 会用到索引</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%aaa'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//'%aaa' 或者 '_aaa' 不会使用索引</span></code></pre><p>【强制】绑定变量和字段数据类型需要保持一致</p><p><strong>解读：</strong>字段定义和 SQL 绑定变量传进来的值的类型需要保持一致，否则会导致隐式转换无法使用索引。</p><pre class=" language-sql"><code class="language-sql">例如：dept_id 是一个varchar2型的字段，但在查询时把该字段作为number类型以<span class="token keyword">where</span>条件传给Oracle<span class="token punctuation">,</span>这样会导致索引失效。<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token number">33333333333</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//错误的例子</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">temp</span> <span class="token keyword">where</span> dept_id <span class="token operator">=</span><span class="token string">'33333333333'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正确的例子</span></code></pre><p>【强制】在查询中指定所需的列，不要直接使用 ‘*’ 返回所有的列</p><p><strong>解读：</strong></p><p>（1）在查询中使用 select * 时，需要多做一步查询内部系统目录以便把表中的所有字段名找出来。</p><p>（2）明确字段名，将来在表增加字段的时候，不会导致程序报错。</p><p>（3）读取不需要的列会增加 CPU、IO、NET 消耗。</p><p>（4）无法有效的利用覆盖索引。</p><p>【强制】变量和参数在类型和长度必须与表定义的列类型和长度匹配</p><p><strong>解读：</strong>减少存储空间和 IO 资源的浪费，避免隐式转换而导致不使用索引的情况。</p><p>【强制】SQL 语句中的表关联查询不允许超过5个，需要 join 的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引</p><p><strong>解读：</strong>优化器对与多表连接查询的处理效果不佳，应尽可能减少多表连接的情况，关联字段需要有索引避免不必要的全表扫描，提高执行效率。</p><p>【强制】禁止使用触发器</p><p><strong>解读：</strong>考虑到降低数据库的复杂度，提高可维护性，减少不可预知的风险，禁止使用触发器。</p><p>【强制】对于很大的表进行全表删除时，不允许使用全表 delete，应用 truncate 或 drop 重建</p><p><strong>解读：</strong>delete 语句是 dml，该操作会放到 rollback segment 中，事务提交后才生效；delete 语句不影响表所占用的 extent，高水线（high watermark）保持原位置不动；而 truncate 会将高水线复位（回到最开始）。</p><p>另外删除速度一般来说：drop &gt; truncate &gt; delete</p><p>【强制】数据清理时，应分批提交降低事务长度，一般每个事务不得超过10万行</p><p><strong>解读：</strong>单个事务过长容易造成数据库 undo 资源不足回滚。</p><p>【强制】表在大量增删改操作后，特别是数据加载之后应立即做统计信息收集</p><p><strong>解读：</strong>表在大量增删改操作后，统计信息不准确会导致 SQL 语句效率变差，影响性能。</p><p>【强制】批量中使用的临时表，若一次导入大量数据进行批量处理，需要在导入大量数据之后，进行批量处理之前，手工进行统计信息收集</p><p><strong>解读：</strong>收集统计信息，确保优化器提供的执行计划是最优的</p><p>【强制】对分区表的访问需要带上分区键作为过滤条件</p><p><strong>解读：</strong>对分区表的访问语句效率取决于 where 条件字段，使用分区键作为过滤条件才能有效利用分区表的机制。</p><p>【强制】大批量插入删除更新需分批提交，更新记录数超过原表记录数10%或超过100W条，需在更新后手工收集统计信息</p><p><strong>解读：</strong>大批量数据插入删除应分批提交，以免造成数据库 undo 资源不足回滚。在操作完成后需手工收集统计信息，确保统计信息的准确性。大批量数据删除后建议对空间实施回收或重组。</p><p>【强制】使用 rownum 实现分页，应使用三层嵌套，并在最里层进行排序</p><p><strong>解读：</strong></p><p>【建议】针对存在大量 insert 和 delete 操作的表，应定期对索引进行重建</p><p><strong>解读：</strong>表在大量 insert 和 delete 操作后，数据表会产生大量碎片，索引可能会很大，这类表需要考虑定期重建，以提高效率。</p><p>【建议】OLTP 系统中 SQL 尽量使用绑定变量，批量系统中，语句过滤条件中的列对于不同取值记录分布不均匀，而是有较大偏差的情况下，应避免使用绑定变量</p><p><strong>解读：</strong>SQL 在数据库的处理分为分析和执行两个步骤，不含非绑定变量的SQL只需要分析一次，含非绑定变量的 SQL 每次执行前都需要分析；在批量过程中，若语句过滤条件中的列对于不同取值记录分布不均匀，而是有较大偏差的情况下，使用绑定变量会导致不同的代入值选择同一执行计划，在很多情况下会导致糟糕的语句执行效率，应避免使用绑定变量，由 Oracle 根据不同取值重新解析生成执行计划更好。</p><p>【建议】避免使用全表扫描</p><p><strong>解读：</strong>对于小表或代码表的访问，全表扫描也许是合理的，其他情况下应尽量避免全表扫描，提高执行效率。</p><hr><h4 id="三、索引约束"><a href="#三、索引约束" class="headerlink" title="三、索引约束"></a>三、索引约束</h4><p>【强制】 分区表上如无特别原因不使用全局索引</p><p><strong>解读：</strong>分区表使用 global index 或 local index 因根据实际的业务需要来设计，应尽量将业务需要统计的信息放在同一个分区中，使用 local index 使分区表的性能最大化。若需要使用 global index，需说明原因，对分区进行维护后全局索引会失效，应特别注意。</p><p>【强制】 OLTP系统每张表索引不超过5个</p><p><strong>解读：</strong>控制索引数量可以减少不必要的索引空间维护和使用，对于经常插入、更新、删除数据的表应减少索引数量，过多的索引会导致索引开销大，影响性能。</p><p>【强制】 复合索引字段不超过3个，必须将区分度更高的字段放在左边</p><p><strong>解读：</strong>复合索引的设计应综合考虑前缀性和可选性，索引字段不宜过多，应尽可能将区分度高，查询使用较频繁的字段放在左边，这样能够一开始就有效的过滤掉无用数据。在写 SQL 时，若WHERE条件中包含多个条件，应看表上是否有线程的联合索引可使用，注意各个条件的顺序应尽量和复合索引字段顺序一致。</p><p>【强制】 没有重复索引（如 a 和 a,b 列都建了索引）</p><p><strong>解读：</strong>避免在表上建立重复的索引如复合索引 (a,b) 和单列索引 a，降低索引的维护成本。</p><p>【强制】 外键的子表关联字段上必须有索引</p><p><strong>解读：</strong>如果使用了外键约束，子表的关联字段上必须创建索引，否则主表的每一条记录删除，都会导致对子表一次全表扫描。</p><p>【强制】 创建和重建索引时，需要带 online 选项</p><p><strong>解读：</strong>默认创建和重建索引时，会对原表上锁，影响表的更改、删除操作，需要带选项 online，即使增加了 online 选项，也应该避开业务高峰时操作。索引创建或重建完成后需要进行统计信息收集。</p><p>【强制】 避免在更新频繁、区分度不高的列上单独建立索引</p><p><strong>解读：</strong>区分度不高的列单独创建索引的优化效果很小，但是较为频繁的更新则会让索引的维护成本更高。</p><hr><h4 id="四、存储过程约束"><a href="#四、存储过程约束" class="headerlink" title="四、存储过程约束"></a>四、存储过程约束</h4><p>【强制】存储过程使用中必须要有异常捕获机制</p><p><strong>解读：</strong>合理的异常捕获能够避免造成应用程序状态不明的问题，便于问题分析和定位。</p><p>【强制】存储过程中如果打开了 dblink、cursor 等资源，在存储过程退出时必须关闭上述资源</p><p><strong>解读：</strong>dblink session 在基于连接池的管理中可能会引起目标管理系统的 session 泛滥，消耗进程资源。 cursor 同理，在使用完毕后关闭游标，降低资源争用和浪费。</p><hr><h4 id="五、系统层级"><a href="#五、系统层级" class="headerlink" title="五、系统层级"></a>五、系统层级</h4><p>【强制】数据库长连接需要有手段检测异常中断，中断后应有重连机制</p><p><strong>解读：</strong>提高资源利用率，确保应用在一定时间内有自我修复能力</p><p>【强制】数据库连接字符串配置：列出所有 IP 地址</p><p><strong>解读：</strong>确保能够实现失败转移功能</p><p>【强制】数据库连接字符串配置：不使用物理 IP</p><p><strong>解读：</strong>物理 IP 在服务器宕机后可能导致应用无法重连</p><p>【强制】数据库连接字符串配置：开启 failover</p><p><strong>解读：</strong>确保数据库集群中任何一个节点的故障不会影响用户使用，开启 failover 后，连接到故障节点的用户会被自动转移到健康节点。</p><p>【强制】数据库连接字符串配置：关闭load balance</p><p><strong>解读：</strong>实现只使用 RAC 一个实例，防止数据在两个节点之间大量传输，影响性能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 开发规范 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
